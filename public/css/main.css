.cont {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto; }
  .cont:after {
    display: block;
    content: '';
    clear: both; }

.cont-full {
  width: 100%; }
  .cont-full:after {
    display: block;
    content: '';
    clear: both; }

.search-box {
  padding: 25px 0;
  margin-bottom: 40px;
  background-color: #00a6e6; }
  .search-box .cont {
    max-width: 960px; }
  .search-box .main-search {
    position: relative;
    max-width: 370px;
    width: 100%;
    margin-right: 10px;
    display: inline-block; }
    .search-box .main-search > i {
      position: absolute;
      left: 8px;
      top: 10px;
      z-index: 500; }
  .search-box .last-results {
    padding-top: 10px; }
    .search-box .last-results span {
      font: 400 14px/20px "Cera PRO", sans-serif;
      color: #ffffff;
      display: inline-block;
      margin-right: 25px;
      opacity: 0.7; }
      .search-box .last-results span:first-of-type {
        opacity: 1; }
  .search-box .select2-container {
    width: 100% !important; }
    .search-box .select2-container .select2-selection {
      height: 43px;
      -webkit-border-radius: 20px;
      border-radius: 20px;
      line-height: 43px; }
      .search-box .select2-container .select2-selection .select2-selection__rendered {
        margin-left: 25px;
        height: 43px;
        line-height: 43px; }
    .search-box .select2-container .select2-selection__arrow {
      top: 10px;
      right: 15px; }
    .search-box .select2-container .select2-selection--single {
      border: 0; }
  .search-box .y-btn {
    background-color: #fedc00;
    color: #595959;
    font-size: 19px;
    text-align: center;
    outline: 0;
    border: 0;
    text-transform: uppercase;
    line-height: 43px;
    height: 43px;
    max-width: 170px;
    width: 100%;
    display: inline-block;
    vertical-align: middle;
    -webkit-border-radius: 20px;
    border-radius: 20px;
    -webkit-transition: all 200ms ease-in-out;
    transition: all 200ms ease-in-out;
    cursor: pointer; }
    .search-box .y-btn:hover {
      background-color: #fff; }

.box-3 {
  padding: 40px 0; }
  .box-3 figure {
    width: -webkit-calc(100% / 3);
    width: calc(100% / 3);
    float: left;
    text-align: center; }
    .box-3 figure img {
      display: inline-block; }
    .box-3 figure h3 {
      margin-bottom: 20px; }
    .box-3 figure P {
      color: #a3a3a3;
      padding: 0 70px; }

.box-4 {
  padding: 40px 0; }
  .box-4 .main-categories {
    font-size: 0; }
  .box-4 figure {
    width: 30%;
    display: block;
    float: left;
    margin-bottom: 50px;
    position: relative;
    overflow: hidden;
    background: #3085a3;
    max-height: 340px;
    text-align: center;
    cursor: pointer; }
    .box-4 figure img {
      position: relative;
      -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, transform 0.35s;
      transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s;
      display: block;
      min-height: 100%;
      width: 100%;
      opacity: 0.8;
      -webkit-transform: translate3d(0, -30px, 0);
      transform: translate3d(0, -30px, 0); }
    .box-4 figure figcaption {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%; }
      .box-4 figure figcaption:before {
        position: absolute;
        content: '';
        opacity: 0;
        top: 30px;
        right: 20px;
        bottom: 30px;
        left: 20px;
        border-top: 1px solid #fff;
        border-bottom: 1px solid #fff;
        -webkit-transform: scale(0, 1);
        -ms-transform: scale(0, 1);
            transform: scale(0, 1);
        -webkit-transform-origin: 0 0;
        -ms-transform-origin: 0 0;
            transform-origin: 0 0;
        -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, transform 0.35s;
        transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }
      .box-4 figure figcaption:after {
        position: absolute;
        content: '';
        opacity: 0;
        top: 20px;
        right: 30px;
        bottom: 20px;
        left: 30px;
        border-right: 1px solid #fff;
        border-left: 1px solid #fff;
        -webkit-transform: scale(1, 0);
        -ms-transform: scale(1, 0);
            transform: scale(1, 0);
        -webkit-transform-origin: 100% 0;
        -ms-transform-origin: 100% 0;
            transform-origin: 100% 0;
        -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, transform 0.35s;
        transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }
      .box-4 figure figcaption p {
        padding-top: 130px;
        font-weight: 400;
        font-size: 22px;
        line-height: 25px;
        font-family: "Cera PRO", sans-serif;
        color: #fff;
        -webkit-transform: translate3d(0, -30px, 0);
        transform: translate3d(0, -30px, 0);
        -webkit-transition: -webkit-transform 0.35s;
        transition: -webkit-transform 0.35s;
        transition: transform 0.35s;
        transition: transform 0.35s, -webkit-transform 0.35s; }
      .box-4 figure figcaption span {
        padding: 20px 0;
        color: #fff;
        -webkit-transform: translate3d(0, -30px, 0);
        transform: translate3d(0, -30px, 0);
        -webkit-transition: -webkit-transform 0.35s;
        transition: -webkit-transform 0.35s;
        transition: transform 0.35s;
        transition: transform 0.35s, -webkit-transform 0.35s;
        font-size: 20px;
        opacity: 0.8;
        display: block; }
      .box-4 figure figcaption a {
        -webkit-transform: translate3d(0, -30px, 0);
        transform: translate3d(0, -30px, 0);
        -webkit-transition: -webkit-transform 0.35s;
        transition: -webkit-transform 0.35s;
        transition: transform 0.35s;
        transition: transform 0.35s, -webkit-transform 0.35s;
        font-weight: 400;
        font-size: 16px;
        line-height: 25px;
        font-family: "Cera PRO", sans-serif;
        color: #fff;
        border: 1px solid #fff;
        background-color: rgba(255, 255, 255, 0.3);
        display: block;
        max-width: 135px;
        width: 100%;
        margin: 0 auto;
        padding: 5px 10px;
        -webkit-border-radius: 20px;
        border-radius: 20px; }
    .box-4 figure:hover img {
      opacity: 0.7;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0);
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s; }
    .box-4 figure:hover figcaption p {
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0); }
    .box-4 figure:hover figcaption span {
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0); }
    .box-4 figure:hover figcaption a {
      background-color: #fedc00;
      border-color: #fedc00;
      color: #454545;
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0); }
    .box-4 figure:hover figcaption:before {
      opacity: 1;
      -webkit-transform: scale(1);
      -ms-transform: scale(1);
          transform: scale(1); }
    .box-4 figure:hover figcaption:after {
      opacity: 1;
      -webkit-transform: scale(1);
      -ms-transform: scale(1);
          transform: scale(1); }
    .box-4 figure:nth-child(3n+2) {
      margin-left: 5%;
      margin-right: 5%; }

.box-5 {
  background-color: #3bc8ff;
  margin-bottom: 40px; }
  .box-5 figure img {
    float: left;
    width: 52%; }
  .box-5 figure figcaption {
    width: 48%;
    text-align: center;
    /* padding: 0 70px;*/
    display: block;
    float: right; }
    .box-5 figure figcaption p {
      padding-top: 20%;
      padding-bottom: 15%;
      line-height: 30px;
      font-size: 26px;
      color: #fff; }
    .box-5 figure figcaption a {
      background-color: #fedc00;
      color: #595959;
      font-size: 19px;
      text-align: center;
      outline: 0;
      border: 0;
      text-transform: uppercase;
      line-height: 43px;
      height: 43px;
      max-width: 225px;
      width: 100%;
      display: inline-block;
      vertical-align: middle;
      -webkit-border-radius: 20px;
      border-radius: 20px;
      -webkit-transition: all 200ms ease-in-out;
      transition: all 200ms ease-in-out;
      cursor: pointer; }
      .box-5 figure figcaption a:hover {
        background-color: #fff; }

@media screen and (max-width: 1200px) {
  .box-4 figure {
    max-height: 270px; }
    .box-4 figure img {
      position: relative;
      -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, transform 0.35s;
      transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s;
      display: block;
      min-height: 100%;
      width: 100%;
      opacity: 0.8;
      -webkit-transform: translate3d(0, -30px, 0);
      transform: translate3d(0, -30px, 0); }
    .box-4 figure figcaption:before {
      top: 20px;
      right: 14px;
      bottom: 20px;
      left: 14px; }
    .box-4 figure figcaption:after {
      top: 14px;
      right: 20px;
      bottom: 14px;
      left: 20px; }
    .box-4 figure figcaption p {
      padding-top: 90px; }
    .box-4 figure:nth-child(3n+2) {
      margin-left: 5%;
      margin-right: 5%; }
  .box-5 figure figcaption p {
    padding-top: 10%;
    padding-bottom: 5%; } }

@media screen and (max-width: 980px) {
  .cont {
    width: 98%; }
  .search-box {
    padding: 15px 0;
    margin-bottom: 20px; }
    .search-box .main-search {
      margin: 15px auto;
      display: block; }
      .search-box .main-search > i {
        position: absolute;
        left: 8px;
        top: 10px;
        z-index: 500; }
    .search-box .last-results {
      display: none; }
    .search-box .select2-container {
      width: 100% !important; }
      .search-box .select2-container .select2-selection {
        height: 43px;
        -webkit-border-radius: 20px;
        border-radius: 20px;
        line-height: 43px; }
        .search-box .select2-container .select2-selection .select2-selection__rendered {
          margin-left: 25px;
          height: 43px;
          line-height: 43px; }
      .search-box .select2-container .select2-selection__arrow {
        top: 10px;
        right: 15px; }
      .search-box .select2-container .select2-selection--single {
        border: 0; }
    .search-box .y-btn {
      max-width: 370px;
      margin: 0 auto;
      display: block; }
  .box-4 {
    padding: 20px 0; }
    .box-4 figure {
      width: 44%;
      margin-left: 2%;
      margin-right: 2%;
      margin-bottom: 25px;
      max-height: 300px; }
      .box-4 figure figcaption:before {
        position: absolute;
        content: '';
        opacity: 0;
        top: 30px;
        right: 20px;
        bottom: 30px;
        left: 20px;
        border-top: 1px solid #fff;
        border-bottom: 1px solid #fff;
        -webkit-transform: scale(0, 1);
        -ms-transform: scale(0, 1);
            transform: scale(0, 1);
        -webkit-transform-origin: 0 0;
        -ms-transform-origin: 0 0;
            transform-origin: 0 0;
        -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, transform 0.35s;
        transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }
      .box-4 figure figcaption:after {
        position: absolute;
        content: '';
        opacity: 0;
        top: 20px;
        right: 30px;
        bottom: 20px;
        left: 30px;
        border-right: 1px solid #fff;
        border-left: 1px solid #fff;
        -webkit-transform: scale(1, 0);
        -ms-transform: scale(1, 0);
            transform: scale(1, 0);
        -webkit-transform-origin: 100% 0;
        -ms-transform-origin: 100% 0;
            transform-origin: 100% 0;
        -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, -webkit-transform 0.35s;
        transition: opacity 0.35s, transform 0.35s;
        transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }
      .box-4 figure figcaption p {
        padding-top: 130px;
        font-weight: 400;
        font-size: 22px;
        line-height: 25px;
        font-family: "Cera PRO", sans-serif;
        color: #fff;
        -webkit-transform: translate3d(0, -30px, 0);
        transform: translate3d(0, -30px, 0);
        -webkit-transition: -webkit-transform 0.35s;
        transition: -webkit-transform 0.35s;
        transition: transform 0.35s;
        transition: transform 0.35s, -webkit-transform 0.35s; }
      .box-4 figure figcaption span {
        padding: 20px 0;
        color: #fff;
        -webkit-transform: translate3d(0, -30px, 0);
        transform: translate3d(0, -30px, 0);
        -webkit-transition: -webkit-transform 0.35s;
        transition: -webkit-transform 0.35s;
        transition: transform 0.35s;
        transition: transform 0.35s, -webkit-transform 0.35s;
        font-size: 20px;
        opacity: 0.8;
        display: block; }
      .box-4 figure figcaption a {
        -webkit-transform: translate3d(0, -30px, 0);
        transform: translate3d(0, -30px, 0);
        -webkit-transition: -webkit-transform 0.35s;
        transition: -webkit-transform 0.35s;
        transition: transform 0.35s;
        transition: transform 0.35s, -webkit-transform 0.35s;
        font-weight: 400;
        font-size: 16px;
        line-height: 25px;
        font-family: "Cera PRO", sans-serif;
        color: #fff;
        border: 1px solid #fff;
        background-color: rgba(255, 255, 255, 0.3);
        display: block;
        max-width: 135px;
        width: 100%;
        margin: 0 auto;
        padding: 5px 10px;
        -webkit-border-radius: 20px;
        border-radius: 20px; }
      .box-4 figure:hover img {
        opacity: 0.7;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
        -webkit-transition-delay: 0.15s;
        transition-delay: 0.15s; }
      .box-4 figure:hover figcaption p {
        -webkit-transition-delay: 0.15s;
        transition-delay: 0.15s;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0); }
      .box-4 figure:hover figcaption span {
        -webkit-transition-delay: 0.15s;
        transition-delay: 0.15s;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0); }
      .box-4 figure:hover figcaption a {
        background-color: #fedc00;
        border-color: #fedc00;
        color: #454545;
        -webkit-transition-delay: 0.15s;
        transition-delay: 0.15s;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0); }
      .box-4 figure:hover figcaption:before {
        opacity: 1;
        -webkit-transform: scale(1);
        -ms-transform: scale(1);
            transform: scale(1); }
      .box-4 figure:hover figcaption:after {
        opacity: 1;
        -webkit-transform: scale(1);
        -ms-transform: scale(1);
            transform: scale(1); }
      .box-4 figure:nth-child(3n+2) {
        margin-left: 2%;
        margin-right: 2%; }
  .box-5 figure figcaption p {
    font-size: 18px;
    padding-top: 10%;
    padding-bottom: 5%; } }

@media screen and (max-width: 880px) {
  .box-3 {
    padding: 20px 0; }
    .box-3 figure P {
      display: none; } }

@media screen and (max-width: 768px) {
  .box-3 {
    padding: 20px 0; }
    .box-3 figure {
      width: 100%;
      float: none; }
      .box-3 figure P {
        display: none; }
  .box-4 figure {
    width: 100%;
    margin: 0 auto 20px auto;
    float: none; }
    .box-4 figure figcaption:before {
      position: absolute;
      content: '';
      opacity: 0;
      top: 30px;
      right: 20px;
      bottom: 30px;
      left: 20px;
      border-top: 1px solid #fff;
      border-bottom: 1px solid #fff;
      -webkit-transform: scale(0, 1);
      -ms-transform: scale(0, 1);
          transform: scale(0, 1);
      -webkit-transform-origin: 0 0;
      -ms-transform-origin: 0 0;
          transform-origin: 0 0;
      -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, transform 0.35s;
      transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }
    .box-4 figure figcaption:after {
      position: absolute;
      content: '';
      opacity: 0;
      top: 20px;
      right: 30px;
      bottom: 20px;
      left: 30px;
      border-right: 1px solid #fff;
      border-left: 1px solid #fff;
      -webkit-transform: scale(1, 0);
      -ms-transform: scale(1, 0);
          transform: scale(1, 0);
      -webkit-transform-origin: 100% 0;
      -ms-transform-origin: 100% 0;
          transform-origin: 100% 0;
      -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, -webkit-transform 0.35s;
      transition: opacity 0.35s, transform 0.35s;
      transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s; }
    .box-4 figure figcaption p {
      padding-top: 130px;
      font-weight: 400;
      font-size: 22px;
      line-height: 25px;
      font-family: "Cera PRO", sans-serif;
      color: #fff;
      -webkit-transform: translate3d(0, -30px, 0);
      transform: translate3d(0, -30px, 0);
      -webkit-transition: -webkit-transform 0.35s;
      transition: -webkit-transform 0.35s;
      transition: transform 0.35s;
      transition: transform 0.35s, -webkit-transform 0.35s; }
    .box-4 figure figcaption span {
      padding: 20px 0;
      color: #fff;
      -webkit-transform: translate3d(0, -30px, 0);
      transform: translate3d(0, -30px, 0);
      -webkit-transition: -webkit-transform 0.35s;
      transition: -webkit-transform 0.35s;
      transition: transform 0.35s;
      transition: transform 0.35s, -webkit-transform 0.35s;
      font-size: 20px;
      opacity: 0.8;
      display: block; }
    .box-4 figure figcaption a {
      -webkit-transform: translate3d(0, -30px, 0);
      transform: translate3d(0, -30px, 0);
      -webkit-transition: -webkit-transform 0.35s;
      transition: -webkit-transform 0.35s;
      transition: transform 0.35s;
      transition: transform 0.35s, -webkit-transform 0.35s;
      font-weight: 400;
      font-size: 16px;
      line-height: 25px;
      font-family: "Cera PRO", sans-serif;
      color: #fff;
      border: 1px solid #fff;
      background-color: rgba(255, 255, 255, 0.3);
      display: block;
      max-width: 135px;
      width: 100%;
      margin: 0 auto;
      padding: 5px 10px;
      -webkit-border-radius: 20px;
      border-radius: 20px; }
    .box-4 figure:hover img {
      opacity: 0.7;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0);
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s; }
    .box-4 figure:hover figcaption p {
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0); }
    .box-4 figure:hover figcaption span {
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0); }
    .box-4 figure:hover figcaption a {
      background-color: #fedc00;
      border-color: #fedc00;
      color: #454545;
      -webkit-transition-delay: 0.15s;
      transition-delay: 0.15s;
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0); }
    .box-4 figure:hover figcaption:before {
      opacity: 1;
      -webkit-transform: scale(1);
      -ms-transform: scale(1);
          transform: scale(1); }
    .box-4 figure:hover figcaption:after {
      opacity: 1;
      -webkit-transform: scale(1);
      -ms-transform: scale(1);
          transform: scale(1); }
    .box-4 figure:nth-child(3n+2) {
      margin: 0 auto 20px auto; }
  .box-5 figure img {
    display: none; }
  .box-5 figure figcaption {
    width: 100%;
    float: none;
    padding: 5% 0; }
    .box-5 figure figcaption p {
      padding-top: 3%; } }

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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LGVBQWU7TUFDZixrQkFBa0I7TURscEIxQiw0QkNtcEJ3QjtNRGpwQnhCLG9CQ2lwQndCLEVBRWpCO0lBcEZQO01BeUZRLGFBQWE7TUFDYix3Q0FBOEI7TUFDOUIsZ0NBQXNCO01BQ3RCLGdDQUFnQztNQUNoQyx3QkFBd0IsRUFDekI7SUE5RlA7TUFpR1UsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBckdUO01BdUdVLGdDQUFnQztNQUNoQyx3QkFBd0I7TUFDeEIsd0NBQThCO01BQzlCLGdDQUFzQixFQUN2QjtJQTNHVDtNQTZHVSwwQkQzc0JHO01DNHNCSCxzQkQ1c0JHO01DNnNCSCxlQUFlO01BQ2YsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBcEhUO01Bc0hVLFdBQVc7TUFDWCw0QkFBd0I7TUFDeEIsd0JBQWdCO1VBQWhCLG9CQUFnQixFQUNqQjtJQXpIVDtNQTJIVSxXQUFXO01BQ1gsNEJBQXdCO01BQ3hCLHdCQUFnQjtVQUFoQixvQkFBZ0IsRUFDakI7SUE5SFQ7TUFtSU0seUJBQXlCLEVBQzFCO0VBTUw7SUFLTSxjQUFjLEVBQ2Y7RUFOTDtJQVFNLFlBQVk7SUFDWixZQUFZO0lBQ1osY0FBYyxFQUtmO0lBZkw7TUFZUSxnQkFBZ0IsRUFDakIsRUFBQSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUV4bysyOjMwMCw0MDAsNTAwLDYwMCw3MDAmc3Vic2V0PWN5cmlsbGljJztcclxuXHJcbiRidG5fYzogI2ZlZGMwMDtcclxuJGJnX2MxOiAjM2JjOGZmO1xyXG4kYmdfYzI6ICMwMGE2ZTY7XHJcbiRiZ19mb290ZXI6ICMwMDMxNDQ7XHJcbiR0eHRfYzogIzQ4NDc0ODtcclxuXHJcbiRmZjogJ0NlcmEgUFJPJywgc2Fucy1zZXJpZjtcclxuJGZyOiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuXHJcbi8vXHJcbi8vTUFURVJJQUxJWkUgRk9STSBWQVJcclxuXHJcblxyXG5cclxuLy9cclxuLy9cclxuXHJcblxyXG4vL1xyXG4vL19fX19fX19fX19fX19fX19NSVhJTlNcclxuQG1peGluIGNscigpIHtcclxuICAmOmFmdGVyIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgY29udGVudDogJyc7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBicigkcikge1xyXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogJHI7XHJcbiAgLW1vei1ib3JkZXItcmFkaXVzOiAkcjtcclxuICBib3JkZXItcmFkaXVzOiAkcjtcclxufVxyXG5cclxuQG1peGluIHRyYW5zKCR0aW1lczoyMDBtcykge1xyXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbW96LXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW8tdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICB0cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG59XHJcbkBtaXhpbiBvbmx5Q2VudGVySW1nKCRoZWlnaHQ6YXV0bywgJHdpZHRoOiBhdXRvKXtcclxuICBoZWlnaHQ6ICRoZWlnaHQ7XHJcbiAgd2lkdGg6ICR3aWR0aDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gIGltZ3tcclxuICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICB9XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fRU5EIE1JWElOU1xyXG4vL1xyXG4uY29udCB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxufVxyXG5cclxuLmNvbnQtZnVsbCB7XHJcbiAgLy9oZWlnaHQ6OTB2aDtcclxuXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG59XHJcblxyXG5cclxuIiwiQGltcG9ydCBcInZhclwiO1xyXG5cclxuLnNlYXJjaC1ib3gge1xyXG4gIHBhZGRpbmc6IDI1cHggMDtcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxuICAuY29udCB7XHJcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xyXG4gIH1cclxuICAubWFpbi1zZWFyY2gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWF4LXdpZHRoOiAzNzBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgPiBpIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBsZWZ0OiA4cHg7XHJcbiAgICAgIHRvcDogMTBweDtcclxuICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgfVxyXG4gIH1cclxuICAubGFzdC1yZXN1bHRzIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgc3BhbiB7XHJcbiAgICAgIGZvbnQ6IDQwMCAxNHB4LzIwcHggJGZmO1xyXG4gICAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI1cHg7XHJcbiAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC5zZWxlY3QyLWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uIHtcclxuXHJcbiAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC5zZWxlY3QyLXNlbGVjdGlvbl9fYXJyb3cge1xyXG4gICAgICB0b3A6IDEwcHg7XHJcbiAgICAgIHJpZ2h0OiAxNXB4O1xyXG4gICAgfVxyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC55LWJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICBjb2xvcjogIzU5NTk1OTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICBtYXgtd2lkdGg6IDE3MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmJveC0zIHtcclxuICBwYWRkaW5nOiA0MHB4IDA7XHJcblxyXG4gIGZpZ3VyZSB7XHJcbiAgICAvL291dGxpbmU6IDFweCBzb2xpZDtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLyAzKTtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaW1nIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG4gICAgaDMge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgUCB7XHJcbiAgICAgIGNvbG9yOiAjYTNhM2EzO1xyXG4gICAgICBwYWRkaW5nOiAwIDcwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYm94LTQge1xyXG4gIHBhZGRpbmc6IDQwcHggMDtcclxuICAubWFpbi1jYXRlZ29yaWVzIHtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICAgIC8vZmxleC1kaXJlY3Rpb246IHJvdztcclxuICB9XHJcbiAgZmlndXJlIHtcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kOiAjMzA4NWEzO1xyXG4gICAgbWF4LWhlaWdodDogMzQwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAvL21hcmdpbi10b3A6IDEwJTtcclxuICAgIGltZyB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICB9XHJcbiAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcblxyXG4gICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAzMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICBsZWZ0OiAyMHB4O1xyXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMjBweDtcclxuICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgcCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZmY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgfVxyXG4gICAgICBzcGFuIHtcclxuICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB9XHJcbiAgICAgIGEge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgICY6aG92ZXIge1xyXG4gICAgICBpbWcge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICB9XHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidG5fYztcclxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1JTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLmJveC01IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICBmaWd1cmUge1xyXG5cclxuICAgIGltZyB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICB3aWR0aDogNTIlO1xyXG4gICAgfVxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgIHdpZHRoOiA0OCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgLyogcGFkZGluZzogMCA3MHB4OyovXHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIHAge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMCU7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDE1JTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICAgICAgICBmb250LXNpemU6IDI2cHg7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgIGNvbG9yOiAjNTk1OTU5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgb3V0bGluZTogMDtcclxuICAgICAgICBib3JkZXI6IDA7XHJcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICBsaW5lLWhlaWdodDogNDNweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAyMjVweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICBAaW5jbHVkZSBicigyMHB4KTtcclxuICAgICAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9SRVNQT05TSVZFXHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpIHtcclxuICAuYm94LTQge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgbWF4LWhlaWdodDogMjcwcHg7XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgIH1cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDE0cHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHRvcDogMTRweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAxNHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogOTBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgJjpudGgtY2hpbGQoM24rMikge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuYm94LTUge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTAlO1xyXG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDUlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmNvbnQge1xyXG4gICAgd2lkdGg6IDk4JTtcclxuICB9XHJcbiAgLnNlYXJjaC1ib3gge1xyXG4gICAgcGFkZGluZzogMTVweCAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuXHJcbiAgICAubWFpbi1zZWFyY2gge1xyXG4gICAgICBtYXJnaW46IDE1cHggYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgID4gaSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDhweDtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAubGFzdC1yZXN1bHRzIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICB9XHJcbiAgICAuc2VsZWN0Mi1jb250YWluZXIge1xyXG4gICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb24ge1xyXG5cclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCB7XHJcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93IHtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDE1cHg7XHJcbiAgICAgIH1cclxuICAgICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICAgIGJvcmRlcjogMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnktYnRuIHtcclxuXHJcbiAgICAgIG1heC13aWR0aDogMzcwcHg7XHJcblxyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLmJveC00IHtcclxuICAgIHBhZGRpbmc6IDIwcHggMDtcclxuXHJcbiAgICBmaWd1cmUge1xyXG4gICAgICAvL291dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgIHdpZHRoOiA0NCU7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAyJTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcclxuXHJcbiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xyXG5cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcblxyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMzBweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCwgMSk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDMwcHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zNXMsIHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTMwcHg7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgIHBhZGRpbmc6IDIwcHggMDtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGEge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBjb2xvcjogIzQ1NDU0NTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDNuKzIpIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMiU7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIC5ib3gtNSB7XHJcbiAgICBmaWd1cmUge1xyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICBwIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNSU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogODgwcHgpIHtcclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcblxyXG4gICAgICBQIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG5cclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIFAge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5ib3gtNCB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuICAgICAgLy9vdXRsaW5lOiAxcHggc29saWQgcmVkO1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG5cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICB0b3A6IDMwcHg7XHJcbiAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICAgIGxlZnQ6IDIwcHg7XHJcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgbGVmdDogMzBweDtcclxuICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWF4LXdpZHRoOiAxMzVweDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRidG5fYztcclxuICAgICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC5ib3gtNSB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuXHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICBwYWRkaW5nOiA1JSAwO1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDMlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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LGVBQWU7TUFDZixrQkFBa0I7TURscEIxQiw0QkNtcEJ3QjtNRGpwQnhCLG9CQ2lwQndCLEVBRWpCO0lBcEZQO01BeUZRLGFBQWE7TUFDYix3Q0FBOEI7TUFDOUIsZ0NBQXNCO01BQ3RCLGdDQUFnQztNQUNoQyx3QkFBd0IsRUFDekI7SUE5RlA7TUFpR1UsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBckdUO01BdUdVLGdDQUFnQztNQUNoQyx3QkFBd0I7TUFDeEIsd0NBQThCO01BQzlCLGdDQUFzQixFQUN2QjtJQTNHVDtNQTZHVSwwQkQzc0JHO01DNHNCSCxzQkQ1c0JHO01DNnNCSCxlQUFlO01BQ2YsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBcEhUO01Bc0hVLFdBQVc7TUFDWCw0QkFBd0I7TUFDeEIsd0JBQWdCO1VBQWhCLG9CQUFnQixFQUNqQjtJQXpIVDtNQTJIVSxXQUFXO01BQ1gsNEJBQXdCO01BQ3hCLHdCQUFnQjtVQUFoQixvQkFBZ0IsRUFDakI7SUE5SFQ7TUFtSU0seUJBQXlCLEVBQzFCO0VBTUw7SUFLTSxjQUFjLEVBQ2Y7RUFOTDtJQVFNLFlBQVk7SUFDWixZQUFZO0lBQ1osY0FBYyxFQUtmO0lBZkw7TUFZUSxnQkFBZ0IsRUFDakIsRUFBQSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUV4bysyOjMwMCw0MDAsNTAwLDYwMCw3MDAmc3Vic2V0PWN5cmlsbGljJztcclxuXHJcbiRidG5fYzogI2ZlZGMwMDtcclxuJGJnX2MxOiAjM2JjOGZmO1xyXG4kYmdfYzI6ICMwMGE2ZTY7XHJcbiRiZ19mb290ZXI6ICMwMDMxNDQ7XHJcbiR0eHRfYzogIzQ4NDc0ODtcclxuXHJcbiRmZjogJ0NlcmEgUFJPJywgc2Fucy1zZXJpZjtcclxuJGZyOiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuXHJcbi8vXHJcbi8vTUFURVJJQUxJWkUgRk9STSBWQVJcclxuXHJcblxyXG5cclxuLy9cclxuLy9cclxuXHJcblxyXG4vL1xyXG4vL19fX19fX19fX19fX19fX19NSVhJTlNcclxuQG1peGluIGNscigpIHtcclxuICAmOmFmdGVyIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgY29udGVudDogJyc7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBicigkcikge1xyXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogJHI7XHJcbiAgLW1vei1ib3JkZXItcmFkaXVzOiAkcjtcclxuICBib3JkZXItcmFkaXVzOiAkcjtcclxufVxyXG5cclxuQG1peGluIHRyYW5zKCR0aW1lczoyMDBtcykge1xyXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbW96LXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW8tdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICB0cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG59XHJcbkBtaXhpbiBvbmx5Q2VudGVySW1nKCRoZWlnaHQ6YXV0bywgJHdpZHRoOiBhdXRvKXtcclxuICBoZWlnaHQ6ICRoZWlnaHQ7XHJcbiAgd2lkdGg6ICR3aWR0aDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gIGltZ3tcclxuICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICB9XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fRU5EIE1JWElOU1xyXG4vL1xyXG4uY29udCB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxufVxyXG5cclxuLmNvbnQtZnVsbCB7XHJcbiAgLy9oZWlnaHQ6OTB2aDtcclxuXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG59XHJcblxyXG5cclxuIiwiQGltcG9ydCBcInZhclwiO1xyXG5cclxuLnNlYXJjaC1ib3gge1xyXG4gIHBhZGRpbmc6IDI1cHggMDtcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxuICAuY29udCB7XHJcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xyXG4gIH1cclxuICAubWFpbi1zZWFyY2gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWF4LXdpZHRoOiAzNzBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgPiBpIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBsZWZ0OiA4cHg7XHJcbiAgICAgIHRvcDogMTBweDtcclxuICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgfVxyXG4gIH1cclxuICAubGFzdC1yZXN1bHRzIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgc3BhbiB7XHJcbiAgICAgIGZvbnQ6IDQwMCAxNHB4LzIwcHggJGZmO1xyXG4gICAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI1cHg7XHJcbiAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC5zZWxlY3QyLWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uIHtcclxuXHJcbiAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC5zZWxlY3QyLXNlbGVjdGlvbl9fYXJyb3cge1xyXG4gICAgICB0b3A6IDEwcHg7XHJcbiAgICAgIHJpZ2h0OiAxNXB4O1xyXG4gICAgfVxyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC55LWJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICBjb2xvcjogIzU5NTk1OTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICBtYXgtd2lkdGg6IDE3MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmJveC0zIHtcclxuICBwYWRkaW5nOiA0MHB4IDA7XHJcblxyXG4gIGZpZ3VyZSB7XHJcbiAgICAvL291dGxpbmU6IDFweCBzb2xpZDtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLyAzKTtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaW1nIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG4gICAgaDMge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgUCB7XHJcbiAgICAgIGNvbG9yOiAjYTNhM2EzO1xyXG4gICAgICBwYWRkaW5nOiAwIDcwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYm94LTQge1xyXG4gIHBhZGRpbmc6IDQwcHggMDtcclxuICAubWFpbi1jYXRlZ29yaWVzIHtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICAgIC8vZmxleC1kaXJlY3Rpb246IHJvdztcclxuICB9XHJcbiAgZmlndXJlIHtcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kOiAjMzA4NWEzO1xyXG4gICAgbWF4LWhlaWdodDogMzQwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAvL21hcmdpbi10b3A6IDEwJTtcclxuICAgIGltZyB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICB9XHJcbiAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcblxyXG4gICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAzMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICBsZWZ0OiAyMHB4O1xyXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMjBweDtcclxuICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgcCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZmY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgfVxyXG4gICAgICBzcGFuIHtcclxuICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB9XHJcbiAgICAgIGEge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgICY6aG92ZXIge1xyXG4gICAgICBpbWcge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICB9XHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidG5fYztcclxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1JTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLmJveC01IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICBmaWd1cmUge1xyXG5cclxuICAgIGltZyB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICB3aWR0aDogNTIlO1xyXG4gICAgfVxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgIHdpZHRoOiA0OCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgLyogcGFkZGluZzogMCA3MHB4OyovXHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIHAge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMCU7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDE1JTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICAgICAgICBmb250LXNpemU6IDI2cHg7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgIGNvbG9yOiAjNTk1OTU5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgb3V0bGluZTogMDtcclxuICAgICAgICBib3JkZXI6IDA7XHJcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICBsaW5lLWhlaWdodDogNDNweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAyMjVweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICBAaW5jbHVkZSBicigyMHB4KTtcclxuICAgICAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9SRVNQT05TSVZFXHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpIHtcclxuICAuYm94LTQge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgbWF4LWhlaWdodDogMjcwcHg7XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgIH1cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDE0cHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHRvcDogMTRweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAxNHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogOTBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgJjpudGgtY2hpbGQoM24rMikge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuYm94LTUge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTAlO1xyXG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDUlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmNvbnQge1xyXG4gICAgd2lkdGg6IDk4JTtcclxuICB9XHJcbiAgLnNlYXJjaC1ib3gge1xyXG4gICAgcGFkZGluZzogMTVweCAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuXHJcbiAgICAubWFpbi1zZWFyY2gge1xyXG4gICAgICBtYXJnaW46IDE1cHggYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgID4gaSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDhweDtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAubGFzdC1yZXN1bHRzIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICB9XHJcbiAgICAuc2VsZWN0Mi1jb250YWluZXIge1xyXG4gICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb24ge1xyXG5cclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCB7XHJcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93IHtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDE1cHg7XHJcbiAgICAgIH1cclxuICAgICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICAgIGJvcmRlcjogMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnktYnRuIHtcclxuXHJcbiAgICAgIG1heC13aWR0aDogMzcwcHg7XHJcblxyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLmJveC00IHtcclxuICAgIHBhZGRpbmc6IDIwcHggMDtcclxuXHJcbiAgICBmaWd1cmUge1xyXG4gICAgICAvL291dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgIHdpZHRoOiA0NCU7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAyJTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcclxuXHJcbiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xyXG5cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcblxyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMzBweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCwgMSk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDMwcHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zNXMsIHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTMwcHg7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgIHBhZGRpbmc6IDIwcHggMDtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGEge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBjb2xvcjogIzQ1NDU0NTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDNuKzIpIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMiU7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIC5ib3gtNSB7XHJcbiAgICBmaWd1cmUge1xyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICBwIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNSU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogODgwcHgpIHtcclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcblxyXG4gICAgICBQIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG5cclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIFAge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5ib3gtNCB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuICAgICAgLy9vdXRsaW5lOiAxcHggc29saWQgcmVkO1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG5cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICB0b3A6IDMwcHg7XHJcbiAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICAgIGxlZnQ6IDIwcHg7XHJcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgbGVmdDogMzBweDtcclxuICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWF4LXdpZHRoOiAxMzVweDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRidG5fYztcclxuICAgICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC5ib3gtNSB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuXHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICBwYWRkaW5nOiA1JSAwO1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDMlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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LGVBQWU7TUFDZixrQkFBa0I7TURscEIxQiw0QkNtcEJ3QjtNRGpwQnhCLG9CQ2lwQndCLEVBRWpCO0lBcEZQO01BeUZRLGFBQWE7TUFDYix3Q0FBOEI7TUFDOUIsZ0NBQXNCO01BQ3RCLGdDQUFnQztNQUNoQyx3QkFBd0IsRUFDekI7SUE5RlA7TUFpR1UsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBckdUO01BdUdVLGdDQUFnQztNQUNoQyx3QkFBd0I7TUFDeEIsd0NBQThCO01BQzlCLGdDQUFzQixFQUN2QjtJQTNHVDtNQTZHVSwwQkQzc0JHO01DNHNCSCxzQkQ1c0JHO01DNnNCSCxlQUFlO01BQ2YsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBcEhUO01Bc0hVLFdBQVc7TUFDWCw0QkFBd0I7TUFDeEIsd0JBQWdCO1VBQWhCLG9CQUFnQixFQUNqQjtJQXpIVDtNQTJIVSxXQUFXO01BQ1gsNEJBQXdCO01BQ3hCLHdCQUFnQjtVQUFoQixvQkFBZ0IsRUFDakI7SUE5SFQ7TUFtSU0seUJBQXlCLEVBQzFCO0VBTUw7SUFLTSxjQUFjLEVBQ2Y7RUFOTDtJQVFNLFlBQVk7SUFDWixZQUFZO0lBQ1osY0FBYyxFQUtmO0lBZkw7TUFZUSxnQkFBZ0IsRUFDakIsRUFBQSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUV4bysyOjMwMCw0MDAsNTAwLDYwMCw3MDAmc3Vic2V0PWN5cmlsbGljJztcclxuXHJcbiRidG5fYzogI2ZlZGMwMDtcclxuJGJnX2MxOiAjM2JjOGZmO1xyXG4kYmdfYzI6ICMwMGE2ZTY7XHJcbiRiZ19mb290ZXI6ICMwMDMxNDQ7XHJcbiR0eHRfYzogIzQ4NDc0ODtcclxuXHJcbiRmZjogJ0NlcmEgUFJPJywgc2Fucy1zZXJpZjtcclxuJGZyOiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuXHJcbi8vXHJcbi8vTUFURVJJQUxJWkUgRk9STSBWQVJcclxuXHJcblxyXG5cclxuLy9cclxuLy9cclxuXHJcblxyXG4vL1xyXG4vL19fX19fX19fX19fX19fX19NSVhJTlNcclxuQG1peGluIGNscigpIHtcclxuICAmOmFmdGVyIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgY29udGVudDogJyc7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBicigkcikge1xyXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogJHI7XHJcbiAgLW1vei1ib3JkZXItcmFkaXVzOiAkcjtcclxuICBib3JkZXItcmFkaXVzOiAkcjtcclxufVxyXG5cclxuQG1peGluIHRyYW5zKCR0aW1lczoyMDBtcykge1xyXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbW96LXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW8tdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICB0cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG59XHJcbkBtaXhpbiBvbmx5Q2VudGVySW1nKCRoZWlnaHQ6YXV0bywgJHdpZHRoOiBhdXRvKXtcclxuICBoZWlnaHQ6ICRoZWlnaHQ7XHJcbiAgd2lkdGg6ICR3aWR0aDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gIGltZ3tcclxuICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICB9XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fRU5EIE1JWElOU1xyXG4vL1xyXG4uY29udCB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxufVxyXG5cclxuLmNvbnQtZnVsbCB7XHJcbiAgLy9oZWlnaHQ6OTB2aDtcclxuXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG59XHJcblxyXG5cclxuIiwiQGltcG9ydCBcInZhclwiO1xyXG5cclxuLnNlYXJjaC1ib3gge1xyXG4gIHBhZGRpbmc6IDI1cHggMDtcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxuICAuY29udCB7XHJcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xyXG4gIH1cclxuICAubWFpbi1zZWFyY2gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWF4LXdpZHRoOiAzNzBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgPiBpIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBsZWZ0OiA4cHg7XHJcbiAgICAgIHRvcDogMTBweDtcclxuICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgfVxyXG4gIH1cclxuICAubGFzdC1yZXN1bHRzIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgc3BhbiB7XHJcbiAgICAgIGZvbnQ6IDQwMCAxNHB4LzIwcHggJGZmO1xyXG4gICAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI1cHg7XHJcbiAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC5zZWxlY3QyLWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uIHtcclxuXHJcbiAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC5zZWxlY3QyLXNlbGVjdGlvbl9fYXJyb3cge1xyXG4gICAgICB0b3A6IDEwcHg7XHJcbiAgICAgIHJpZ2h0OiAxNXB4O1xyXG4gICAgfVxyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC55LWJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICBjb2xvcjogIzU5NTk1OTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICBtYXgtd2lkdGg6IDE3MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmJveC0zIHtcclxuICBwYWRkaW5nOiA0MHB4IDA7XHJcblxyXG4gIGZpZ3VyZSB7XHJcbiAgICAvL291dGxpbmU6IDFweCBzb2xpZDtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLyAzKTtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaW1nIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG4gICAgaDMge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgUCB7XHJcbiAgICAgIGNvbG9yOiAjYTNhM2EzO1xyXG4gICAgICBwYWRkaW5nOiAwIDcwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYm94LTQge1xyXG4gIHBhZGRpbmc6IDQwcHggMDtcclxuICAubWFpbi1jYXRlZ29yaWVzIHtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICAgIC8vZmxleC1kaXJlY3Rpb246IHJvdztcclxuICB9XHJcbiAgZmlndXJlIHtcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kOiAjMzA4NWEzO1xyXG4gICAgbWF4LWhlaWdodDogMzQwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAvL21hcmdpbi10b3A6IDEwJTtcclxuICAgIGltZyB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICB9XHJcbiAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcblxyXG4gICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAzMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICBsZWZ0OiAyMHB4O1xyXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMjBweDtcclxuICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgcCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZmY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgfVxyXG4gICAgICBzcGFuIHtcclxuICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB9XHJcbiAgICAgIGEge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgICY6aG92ZXIge1xyXG4gICAgICBpbWcge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICB9XHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidG5fYztcclxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1JTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLmJveC01IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICBmaWd1cmUge1xyXG5cclxuICAgIGltZyB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICB3aWR0aDogNTIlO1xyXG4gICAgfVxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgIHdpZHRoOiA0OCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgLyogcGFkZGluZzogMCA3MHB4OyovXHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIHAge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMCU7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDE1JTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICAgICAgICBmb250LXNpemU6IDI2cHg7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgIGNvbG9yOiAjNTk1OTU5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgb3V0bGluZTogMDtcclxuICAgICAgICBib3JkZXI6IDA7XHJcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICBsaW5lLWhlaWdodDogNDNweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAyMjVweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICBAaW5jbHVkZSBicigyMHB4KTtcclxuICAgICAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9SRVNQT05TSVZFXHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpIHtcclxuICAuYm94LTQge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgbWF4LWhlaWdodDogMjcwcHg7XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgIH1cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDE0cHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHRvcDogMTRweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAxNHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogOTBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgJjpudGgtY2hpbGQoM24rMikge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuYm94LTUge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTAlO1xyXG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDUlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmNvbnQge1xyXG4gICAgd2lkdGg6IDk4JTtcclxuICB9XHJcbiAgLnNlYXJjaC1ib3gge1xyXG4gICAgcGFkZGluZzogMTVweCAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuXHJcbiAgICAubWFpbi1zZWFyY2gge1xyXG4gICAgICBtYXJnaW46IDE1cHggYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgID4gaSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDhweDtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAubGFzdC1yZXN1bHRzIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICB9XHJcbiAgICAuc2VsZWN0Mi1jb250YWluZXIge1xyXG4gICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb24ge1xyXG5cclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCB7XHJcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93IHtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDE1cHg7XHJcbiAgICAgIH1cclxuICAgICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICAgIGJvcmRlcjogMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnktYnRuIHtcclxuXHJcbiAgICAgIG1heC13aWR0aDogMzcwcHg7XHJcblxyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLmJveC00IHtcclxuICAgIHBhZGRpbmc6IDIwcHggMDtcclxuXHJcbiAgICBmaWd1cmUge1xyXG4gICAgICAvL291dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgIHdpZHRoOiA0NCU7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAyJTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcclxuXHJcbiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xyXG5cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcblxyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMzBweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCwgMSk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDMwcHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zNXMsIHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTMwcHg7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgIHBhZGRpbmc6IDIwcHggMDtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGEge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBjb2xvcjogIzQ1NDU0NTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDNuKzIpIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMiU7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIC5ib3gtNSB7XHJcbiAgICBmaWd1cmUge1xyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICBwIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNSU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogODgwcHgpIHtcclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcblxyXG4gICAgICBQIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG5cclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIFAge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5ib3gtNCB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuICAgICAgLy9vdXRsaW5lOiAxcHggc29saWQgcmVkO1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG5cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICB0b3A6IDMwcHg7XHJcbiAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICAgIGxlZnQ6IDIwcHg7XHJcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgbGVmdDogMzBweDtcclxuICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWF4LXdpZHRoOiAxMzVweDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRidG5fYztcclxuICAgICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC5ib3gtNSB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuXHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICBwYWRkaW5nOiA1JSAwO1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDMlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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LGVBQWU7TUFDZixrQkFBa0I7TURscEIxQiw0QkNtcEJ3QjtNRGpwQnhCLG9CQ2lwQndCLEVBRWpCO0lBcEZQO01BeUZRLGFBQWE7TUFDYix3Q0FBOEI7TUFDOUIsZ0NBQXNCO01BQ3RCLGdDQUFnQztNQUNoQyx3QkFBd0IsRUFDekI7SUE5RlA7TUFpR1UsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBckdUO01BdUdVLGdDQUFnQztNQUNoQyx3QkFBd0I7TUFDeEIsd0NBQThCO01BQzlCLGdDQUFzQixFQUN2QjtJQTNHVDtNQTZHVSwwQkQzc0JHO01DNHNCSCxzQkQ1c0JHO01DNnNCSCxlQUFlO01BQ2YsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBcEhUO01Bc0hVLFdBQVc7TUFDWCw0QkFBd0I7TUFDeEIsd0JBQWdCO1VBQWhCLG9CQUFnQixFQUNqQjtJQXpIVDtNQTJIVSxXQUFXO01BQ1gsNEJBQXdCO01BQ3hCLHdCQUFnQjtVQUFoQixvQkFBZ0IsRUFDakI7SUE5SFQ7TUFtSU0seUJBQXlCLEVBQzFCO0VBTUw7SUFLTSxjQUFjLEVBQ2Y7RUFOTDtJQVFNLFlBQVk7SUFDWixZQUFZO0lBQ1osY0FBYyxFQUtmO0lBZkw7TUFZUSxnQkFBZ0IsRUFDakIsRUFBQSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUV4bysyOjMwMCw0MDAsNTAwLDYwMCw3MDAmc3Vic2V0PWN5cmlsbGljJztcclxuXHJcbiRidG5fYzogI2ZlZGMwMDtcclxuJGJnX2MxOiAjM2JjOGZmO1xyXG4kYmdfYzI6ICMwMGE2ZTY7XHJcbiRiZ19mb290ZXI6ICMwMDMxNDQ7XHJcbiR0eHRfYzogIzQ4NDc0ODtcclxuXHJcbiRmZjogJ0NlcmEgUFJPJywgc2Fucy1zZXJpZjtcclxuJGZyOiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuXHJcbi8vXHJcbi8vTUFURVJJQUxJWkUgRk9STSBWQVJcclxuXHJcblxyXG5cclxuLy9cclxuLy9cclxuXHJcblxyXG4vL1xyXG4vL19fX19fX19fX19fX19fX19NSVhJTlNcclxuQG1peGluIGNscigpIHtcclxuICAmOmFmdGVyIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgY29udGVudDogJyc7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBicigkcikge1xyXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogJHI7XHJcbiAgLW1vei1ib3JkZXItcmFkaXVzOiAkcjtcclxuICBib3JkZXItcmFkaXVzOiAkcjtcclxufVxyXG5cclxuQG1peGluIHRyYW5zKCR0aW1lczoyMDBtcykge1xyXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbW96LXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW8tdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICB0cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG59XHJcbkBtaXhpbiBvbmx5Q2VudGVySW1nKCRoZWlnaHQ6YXV0bywgJHdpZHRoOiBhdXRvKXtcclxuICBoZWlnaHQ6ICRoZWlnaHQ7XHJcbiAgd2lkdGg6ICR3aWR0aDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gIGltZ3tcclxuICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICB9XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fRU5EIE1JWElOU1xyXG4vL1xyXG4uY29udCB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxufVxyXG5cclxuLmNvbnQtZnVsbCB7XHJcbiAgLy9oZWlnaHQ6OTB2aDtcclxuXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG59XHJcblxyXG5cclxuIiwiQGltcG9ydCBcInZhclwiO1xyXG5cclxuLnNlYXJjaC1ib3gge1xyXG4gIHBhZGRpbmc6IDI1cHggMDtcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxuICAuY29udCB7XHJcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xyXG4gIH1cclxuICAubWFpbi1zZWFyY2gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWF4LXdpZHRoOiAzNzBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgPiBpIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBsZWZ0OiA4cHg7XHJcbiAgICAgIHRvcDogMTBweDtcclxuICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgfVxyXG4gIH1cclxuICAubGFzdC1yZXN1bHRzIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgc3BhbiB7XHJcbiAgICAgIGZvbnQ6IDQwMCAxNHB4LzIwcHggJGZmO1xyXG4gICAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI1cHg7XHJcbiAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC5zZWxlY3QyLWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uIHtcclxuXHJcbiAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC5zZWxlY3QyLXNlbGVjdGlvbl9fYXJyb3cge1xyXG4gICAgICB0b3A6IDEwcHg7XHJcbiAgICAgIHJpZ2h0OiAxNXB4O1xyXG4gICAgfVxyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC55LWJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICBjb2xvcjogIzU5NTk1OTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICBtYXgtd2lkdGg6IDE3MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmJveC0zIHtcclxuICBwYWRkaW5nOiA0MHB4IDA7XHJcblxyXG4gIGZpZ3VyZSB7XHJcbiAgICAvL291dGxpbmU6IDFweCBzb2xpZDtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLyAzKTtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaW1nIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG4gICAgaDMge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgUCB7XHJcbiAgICAgIGNvbG9yOiAjYTNhM2EzO1xyXG4gICAgICBwYWRkaW5nOiAwIDcwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYm94LTQge1xyXG4gIHBhZGRpbmc6IDQwcHggMDtcclxuICAubWFpbi1jYXRlZ29yaWVzIHtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICAgIC8vZmxleC1kaXJlY3Rpb246IHJvdztcclxuICB9XHJcbiAgZmlndXJlIHtcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kOiAjMzA4NWEzO1xyXG4gICAgbWF4LWhlaWdodDogMzQwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAvL21hcmdpbi10b3A6IDEwJTtcclxuICAgIGltZyB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICB9XHJcbiAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcblxyXG4gICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAzMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICBsZWZ0OiAyMHB4O1xyXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMjBweDtcclxuICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgcCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZmY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgfVxyXG4gICAgICBzcGFuIHtcclxuICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB9XHJcbiAgICAgIGEge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgICY6aG92ZXIge1xyXG4gICAgICBpbWcge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICB9XHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidG5fYztcclxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1JTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLmJveC01IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICBmaWd1cmUge1xyXG5cclxuICAgIGltZyB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICB3aWR0aDogNTIlO1xyXG4gICAgfVxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgIHdpZHRoOiA0OCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgLyogcGFkZGluZzogMCA3MHB4OyovXHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIHAge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMCU7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDE1JTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICAgICAgICBmb250LXNpemU6IDI2cHg7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgIGNvbG9yOiAjNTk1OTU5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgb3V0bGluZTogMDtcclxuICAgICAgICBib3JkZXI6IDA7XHJcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICBsaW5lLWhlaWdodDogNDNweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAyMjVweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICBAaW5jbHVkZSBicigyMHB4KTtcclxuICAgICAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9SRVNQT05TSVZFXHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpIHtcclxuICAuYm94LTQge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgbWF4LWhlaWdodDogMjcwcHg7XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgIH1cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDE0cHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHRvcDogMTRweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAxNHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogOTBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgJjpudGgtY2hpbGQoM24rMikge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuYm94LTUge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTAlO1xyXG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDUlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmNvbnQge1xyXG4gICAgd2lkdGg6IDk4JTtcclxuICB9XHJcbiAgLnNlYXJjaC1ib3gge1xyXG4gICAgcGFkZGluZzogMTVweCAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuXHJcbiAgICAubWFpbi1zZWFyY2gge1xyXG4gICAgICBtYXJnaW46IDE1cHggYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgID4gaSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDhweDtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAubGFzdC1yZXN1bHRzIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICB9XHJcbiAgICAuc2VsZWN0Mi1jb250YWluZXIge1xyXG4gICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb24ge1xyXG5cclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCB7XHJcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93IHtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDE1cHg7XHJcbiAgICAgIH1cclxuICAgICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICAgIGJvcmRlcjogMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnktYnRuIHtcclxuXHJcbiAgICAgIG1heC13aWR0aDogMzcwcHg7XHJcblxyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLmJveC00IHtcclxuICAgIHBhZGRpbmc6IDIwcHggMDtcclxuXHJcbiAgICBmaWd1cmUge1xyXG4gICAgICAvL291dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgIHdpZHRoOiA0NCU7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAyJTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcclxuXHJcbiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xyXG5cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcblxyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMzBweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCwgMSk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDMwcHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zNXMsIHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTMwcHg7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgIHBhZGRpbmc6IDIwcHggMDtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGEge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBjb2xvcjogIzQ1NDU0NTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDNuKzIpIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMiU7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIC5ib3gtNSB7XHJcbiAgICBmaWd1cmUge1xyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICBwIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNSU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogODgwcHgpIHtcclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcblxyXG4gICAgICBQIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG5cclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIFAge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5ib3gtNCB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuICAgICAgLy9vdXRsaW5lOiAxcHggc29saWQgcmVkO1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG5cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICB0b3A6IDMwcHg7XHJcbiAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICAgIGxlZnQ6IDIwcHg7XHJcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgbGVmdDogMzBweDtcclxuICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWF4LXdpZHRoOiAxMzVweDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRidG5fYztcclxuICAgICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC5ib3gtNSB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuXHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICBwYWRkaW5nOiA1JSAwO1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDMlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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LGVBQWU7TUFDZixrQkFBa0I7TURscEIxQiw0QkNtcEJ3QjtNRGpwQnhCLG9CQ2lwQndCLEVBRWpCO0lBcEZQO01BeUZRLGFBQWE7TUFDYix3Q0FBOEI7TUFDOUIsZ0NBQXNCO01BQ3RCLGdDQUFnQztNQUNoQyx3QkFBd0IsRUFDekI7SUE5RlA7TUFpR1UsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBckdUO01BdUdVLGdDQUFnQztNQUNoQyx3QkFBd0I7TUFDeEIsd0NBQThCO01BQzlCLGdDQUFzQixFQUN2QjtJQTNHVDtNQTZHVSwwQkQzc0JHO01DNHNCSCxzQkQ1c0JHO01DNnNCSCxlQUFlO01BQ2YsZ0NBQWdDO01BQ2hDLHdCQUF3QjtNQUN4Qix3Q0FBOEI7TUFDOUIsZ0NBQXNCLEVBQ3ZCO0lBcEhUO01Bc0hVLFdBQVc7TUFDWCw0QkFBd0I7TUFDeEIsd0JBQWdCO1VBQWhCLG9CQUFnQixFQUNqQjtJQXpIVDtNQTJIVSxXQUFXO01BQ1gsNEJBQXdCO01BQ3hCLHdCQUFnQjtVQUFoQixvQkFBZ0IsRUFDakI7SUE5SFQ7TUFtSU0seUJBQXlCLEVBQzFCO0VBTUw7SUFLTSxjQUFjLEVBQ2Y7RUFOTDtJQVFNLFlBQVk7SUFDWixZQUFZO0lBQ1osY0FBYyxFQUtmO0lBZkw7TUFZUSxnQkFBZ0IsRUFDakIsRUFBQSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vQGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUV4bysyOjMwMCw0MDAsNTAwLDYwMCw3MDAmc3Vic2V0PWN5cmlsbGljJztcclxuXHJcbiRidG5fYzogI2ZlZGMwMDtcclxuJGJnX2MxOiAjM2JjOGZmO1xyXG4kYmdfYzI6ICMwMGE2ZTY7XHJcbiRiZ19mb290ZXI6ICMwMDMxNDQ7XHJcbiR0eHRfYzogIzQ4NDc0ODtcclxuXHJcbiRmZjogJ0NlcmEgUFJPJywgc2Fucy1zZXJpZjtcclxuJGZyOiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuXHJcbi8vXHJcbi8vTUFURVJJQUxJWkUgRk9STSBWQVJcclxuXHJcblxyXG5cclxuLy9cclxuLy9cclxuXHJcblxyXG4vL1xyXG4vL19fX19fX19fX19fX19fX19NSVhJTlNcclxuQG1peGluIGNscigpIHtcclxuICAmOmFmdGVyIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgY29udGVudDogJyc7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBicigkcikge1xyXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogJHI7XHJcbiAgLW1vei1ib3JkZXItcmFkaXVzOiAkcjtcclxuICBib3JkZXItcmFkaXVzOiAkcjtcclxufVxyXG5cclxuQG1peGluIHRyYW5zKCR0aW1lczoyMDBtcykge1xyXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbW96LXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbiAgLW8tdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICB0cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG59XHJcbkBtaXhpbiBvbmx5Q2VudGVySW1nKCRoZWlnaHQ6YXV0bywgJHdpZHRoOiBhdXRvKXtcclxuICBoZWlnaHQ6ICRoZWlnaHQ7XHJcbiAgd2lkdGg6ICR3aWR0aDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gIGltZ3tcclxuICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICB9XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fRU5EIE1JWElOU1xyXG4vL1xyXG4uY29udCB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxufVxyXG5cclxuLmNvbnQtZnVsbCB7XHJcbiAgLy9oZWlnaHQ6OTB2aDtcclxuXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG59XHJcblxyXG5cclxuIiwiQGltcG9ydCBcInZhclwiO1xyXG5cclxuLnNlYXJjaC1ib3gge1xyXG4gIHBhZGRpbmc6IDI1cHggMDtcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxuICAuY29udCB7XHJcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xyXG4gIH1cclxuICAubWFpbi1zZWFyY2gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWF4LXdpZHRoOiAzNzBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgPiBpIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBsZWZ0OiA4cHg7XHJcbiAgICAgIHRvcDogMTBweDtcclxuICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgfVxyXG4gIH1cclxuICAubGFzdC1yZXN1bHRzIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgc3BhbiB7XHJcbiAgICAgIGZvbnQ6IDQwMCAxNHB4LzIwcHggJGZmO1xyXG4gICAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI1cHg7XHJcbiAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC5zZWxlY3QyLWNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uIHtcclxuXHJcbiAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC5zZWxlY3QyLXNlbGVjdGlvbl9fYXJyb3cge1xyXG4gICAgICB0b3A6IDEwcHg7XHJcbiAgICAgIHJpZ2h0OiAxNXB4O1xyXG4gICAgfVxyXG4gICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC55LWJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICBjb2xvcjogIzU5NTk1OTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICBtYXgtd2lkdGg6IDE3MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmJveC0zIHtcclxuICBwYWRkaW5nOiA0MHB4IDA7XHJcblxyXG4gIGZpZ3VyZSB7XHJcbiAgICAvL291dGxpbmU6IDFweCBzb2xpZDtcclxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLyAzKTtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaW1nIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG4gICAgaDMge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgUCB7XHJcbiAgICAgIGNvbG9yOiAjYTNhM2EzO1xyXG4gICAgICBwYWRkaW5nOiAwIDcwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYm94LTQge1xyXG4gIHBhZGRpbmc6IDQwcHggMDtcclxuICAubWFpbi1jYXRlZ29yaWVzIHtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICAgIC8vZmxleC1kaXJlY3Rpb246IHJvdztcclxuICB9XHJcbiAgZmlndXJlIHtcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kOiAjMzA4NWEzO1xyXG4gICAgbWF4LWhlaWdodDogMzQwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAvL21hcmdpbi10b3A6IDEwJTtcclxuICAgIGltZyB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICB9XHJcbiAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICB0b3A6IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcblxyXG4gICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAzMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICBsZWZ0OiAyMHB4O1xyXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGJvdHRvbTogMjBweDtcclxuICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgIH1cclxuICAgICAgcCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZmY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgfVxyXG4gICAgICBzcGFuIHtcclxuICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICB9XHJcbiAgICAgIGEge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgICY6aG92ZXIge1xyXG4gICAgICBpbWcge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICB9XHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRidG5fYztcclxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1JTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLmJveC01IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICBmaWd1cmUge1xyXG5cclxuICAgIGltZyB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICB3aWR0aDogNTIlO1xyXG4gICAgfVxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgIHdpZHRoOiA0OCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgLyogcGFkZGluZzogMCA3MHB4OyovXHJcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIHAge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMCU7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDE1JTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICAgICAgICBmb250LXNpemU6IDI2cHg7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgIGNvbG9yOiAjNTk1OTU5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgb3V0bGluZTogMDtcclxuICAgICAgICBib3JkZXI6IDA7XHJcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICBsaW5lLWhlaWdodDogNDNweDtcclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAyMjVweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICBAaW5jbHVkZSBicigyMHB4KTtcclxuICAgICAgICBAaW5jbHVkZSB0cmFucygpO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9SRVNQT05TSVZFXHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpIHtcclxuICAuYm94LTQge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgbWF4LWhlaWdodDogMjcwcHg7XHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMC44O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgIH1cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDE0cHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHRvcDogMTRweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAxNHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogOTBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgJjpudGgtY2hpbGQoM24rMikge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1JTtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuYm94LTUge1xyXG4gICAgZmlndXJlIHtcclxuICAgICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTAlO1xyXG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDUlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmNvbnQge1xyXG4gICAgd2lkdGg6IDk4JTtcclxuICB9XHJcbiAgLnNlYXJjaC1ib3gge1xyXG4gICAgcGFkZGluZzogMTVweCAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuXHJcbiAgICAubWFpbi1zZWFyY2gge1xyXG4gICAgICBtYXJnaW46IDE1cHggYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgID4gaSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDhweDtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogNTAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAubGFzdC1yZXN1bHRzIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgICB9XHJcbiAgICAuc2VsZWN0Mi1jb250YWluZXIge1xyXG4gICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb24ge1xyXG5cclxuICAgICAgICBoZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQzcHg7XHJcbiAgICAgICAgLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCB7XHJcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgICAgICAgIGhlaWdodDogNDNweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0M3B4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAuc2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93IHtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDE1cHg7XHJcbiAgICAgIH1cclxuICAgICAgLnNlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUge1xyXG4gICAgICAgIGJvcmRlcjogMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnktYnRuIHtcclxuXHJcbiAgICAgIG1heC13aWR0aDogMzcwcHg7XHJcblxyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLmJveC00IHtcclxuICAgIHBhZGRpbmc6IDIwcHggMDtcclxuXHJcbiAgICBmaWd1cmUge1xyXG4gICAgICAvL291dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgICAgIHdpZHRoOiA0NCU7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAyJTtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcclxuXHJcbiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xyXG5cclxuICAgICAgZmlnY2FwdGlvbiB7XHJcblxyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMzBweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgbGVmdDogMjBweDtcclxuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCwgMSk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgdG9wOiAyMHB4O1xyXG4gICAgICAgICAgcmlnaHQ6IDMwcHg7XHJcbiAgICAgICAgICBib3R0b206IDIwcHg7XHJcbiAgICAgICAgICBsZWZ0OiAzMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcclxuICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zNXMsIHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMTMwcHg7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGFuIHtcclxuICAgICAgICAgIHBhZGRpbmc6IDIwcHggMDtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhIHtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEzNXB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgQGluY2x1ZGUgYnIoMjBweCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuNztcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGEge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBjb2xvcjogIzQ1NDU0NTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDNuKzIpIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMiU7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyJTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIC5ib3gtNSB7XHJcbiAgICBmaWd1cmUge1xyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICBwIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNSU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogODgwcHgpIHtcclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcblxyXG4gICAgICBQIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG5cclxuICAuYm94LTMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG5cclxuICAgIGZpZ3VyZSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIFAge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5ib3gtNCB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuICAgICAgLy9vdXRsaW5lOiAxcHggc29saWQgcmVkO1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgIGZpZ2NhcHRpb24ge1xyXG5cclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICB0b3A6IDMwcHg7XHJcbiAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgIGJvdHRvbTogMzBweDtcclxuICAgICAgICAgIGxlZnQ6IDIwcHg7XHJcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAsIDEpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLCAxKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjM1cywgdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICAgIHJpZ2h0OiAzMHB4O1xyXG4gICAgICAgICAgYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgbGVmdDogMzBweDtcclxuICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMzVzLCB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDEzMHB4O1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjM1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMHB4LCAwKTtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zNXM7XHJcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwcHgsIDApO1xyXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMzBweCwgMCk7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMzVzO1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmZjtcclxuICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWF4LXdpZHRoOiAxMzVweDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgICAgICAgIEBpbmNsdWRlIGJyKDIwcHgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgICY6aG92ZXIge1xyXG4gICAgICAgIGltZyB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiAwLjE1cztcclxuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ0bl9jO1xyXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRidG5fYztcclxuICAgICAgICAgICAgY29sb3I6ICM0NTQ1NDU7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kZWxheTogMC4xNXM7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMTVzO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICAmOm50aC1jaGlsZCgzbisyKSB7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gMjBweCBhdXRvO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC5ib3gtNSB7XHJcblxyXG4gICAgZmlndXJlIHtcclxuXHJcbiAgICAgIGltZyB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICBmaWdjYXB0aW9uIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICBwYWRkaW5nOiA1JSAwO1xyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgcGFkZGluZy10b3A6IDMlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */
