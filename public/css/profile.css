.cont {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto; }
  .cont:after {
    display: block;
    content: '';
    clear: both; }

.cont-full {
  width: 100%; }
  .cont-full:after {
    display: block;
    content: '';
    clear: both; }

.profile-description {
  width: 60%;
  padding-right: 40px;
  float: left;
  margin-bottom: 40px; }
  .profile-description figure {
    min-height: 210px;
    margin-bottom: 40px; }
    .profile-description figure .p-avatar {
      max-width: 230px;
      width: 100%;
      float: left; }
    .profile-description figure figcaption {
      margin-left: 230px; }
      .profile-description figure figcaption h4 {
        font: 700 30px/30px "Cera PRO", sans-serif; }
      .profile-description figure figcaption > p {
        font: 400 15px/20px "Roboto", sans-serif;
        color: #484748;
        margin-bottom: 15px; }
      .profile-description figure figcaption ul {
        margin-bottom: 30px; }
      .profile-description figure figcaption li {
        display: inline-block;
        vertical-align: middle;
        margin-right: 10px; }
        .profile-description figure figcaption li.p-like a {
          color: #f6003a; }
        .profile-description figure figcaption li.p-like span, .profile-description figure figcaption .profile-map li.p-like p, .profile-map .profile-description figure figcaption li.p-like p {
          color: #f6003a; }
        .profile-description figure figcaption li.p-comment a {
          color: #00a6e6; }
        .profile-description figure figcaption li.p-comment span, .profile-description figure figcaption .profile-map li.p-comment p, .profile-map .profile-description figure figcaption li.p-comment p {
          color: #00a6e6; }
        .profile-description figure figcaption li i {
          vertical-align: middle; }
          .profile-description figure figcaption li i:before {
            font-size: 24px; }
        .profile-description figure figcaption li span, .profile-description figure figcaption .profile-map li p, .profile-map .profile-description figure figcaption li p {
          font: 700 21px/25px "Roboto", sans-serif; }
  .profile-description > p {
    font: 700 20px "Roboto", sans-serif;
    margin-bottom: 15px;
    color: #484748;
    padding: 0 20px; }
  .profile-description .p-services {
    width: 100%;
    padding: 0 20px; }
    .profile-description .p-services li {
      width: 100%;
      display: inline-block;
      border-bottom: 1px dotted #000;
      margin-bottom: 15px;
      color: #484748; }
      .profile-description .p-services li span, .profile-description .p-services .profile-map li p, .profile-map .profile-description .p-services li p {
        font: 400 15px/15px "Roboto", sans-serif;
        border-bottom: 3px solid #fff;
        display: block;
        background-color: #fff;
        color: #484748;
        margin-bottom: -4px; }
        .profile-description .p-services li span:first-of-type, .profile-description .p-services .profile-map li p:first-of-type, .profile-map .profile-description .p-services li p:first-of-type {
          float: left; }
        .profile-description .p-services li span:last-of-type, .profile-description .p-services .profile-map li p:last-of-type, .profile-map .profile-description .p-services li p:last-of-type {
          float: right; }

.profile-map {
  width: 40%;
  float: left; }
  .profile-map li {
    margin-bottom: 15px; }
    .profile-map li span, .profile-map li p {
      font: 300 16px/20px "Roboto", sans-serif;
      color: #999999; }
    .profile-map li p {
      color: #000; }

.profile-gallery h4 {
  font: 700 20px/25px "Roboto", sans-serif;
  color: #484748; }

.profile-gallery .gallery-cont .g-photo {
  float: left;
  overflow: hidden;
  height: 245px;
  width: 25%;
  position: relative; }
  .profile-gallery .gallery-cont .g-photo img {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-left: -50%;
    margin-top: -50%; }

.profile-gallery .free-date-btn {
  display: block;
  width: 190px;
  margin: 0 auto; }

@media screen and (max-width: 420px) {
  .profile-gallery .gallery-cont .g-photo {
    float: left;
    overflow: hidden;
    height: 175px;
    width: 50%;
    position: relative; }
    .profile-gallery .gallery-cont .g-photo img {
      position: absolute;
      top: 50%;
      left: 50%;
      margin-left: -50%;
      margin-top: -50%; }
  .profile-gallery .free-date-btn {
    display: block;
    width: 190px;
    margin: 0 auto; } }

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */
