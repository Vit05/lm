.cont {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto; }
  .cont:after {
    display: block;
    content: '';
    clear: both; }

.cont-full {
  width: 100%; }
  .cont-full:after {
    display: block;
    content: '';
    clear: both; }

#mobile_nav {
  display: none; }

#mob_bg {
  display: none; }

.top-nav {
  z-index: 1000;
  padding-top: 20px;
  padding-bottom: 20px;
  position: relative; }
  .top-nav .logo {
    float: left;
    max-width: 190px;
    width: 100%;
    display: block;
    height: 27px;
    background-position: left center;
    -webkit-background-size: contain;
    background-repeat: no-repeat;
    background-size: contain;
    background-image: url("../img/logo-2.png"); }
  .top-nav nav {
    width: 80%;
    float: right;
    display: block; }
  .top-nav .nav {
    float: left;
    outline: 1px solid red; }
    .top-nav .nav li {
      position: relative;
      display: inline-block;
      margin-right: 40px; }
      .top-nav .nav li a {
        display: block;
        color: #fff;
        -webkit-transition: all 0.1s ease-in-out;
        transition: all 0.1s ease-in-out;
        line-height: 27px;
        vertical-align: middle;
        -webkit-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        -moz-osx-font-smoothing: grayscale;
        position: relative;
        overflow: hidden; }
        .top-nav .nav li a:before {
          content: "";
          position: absolute;
          z-index: -1;
          left: 50%;
          right: 50%;
          bottom: 0;
          background: #ffffff;
          height: 2px;
          -webkit-transition-property: left, right;
          transition-property: left, right;
          -webkit-transition-duration: 0.3s;
          transition-duration: 0.3s;
          -webkit-transition-timing-function: ease-out;
          transition-timing-function: ease-out; }
        .top-nav .nav li a:hover:before {
          left: 0;
          right: 0; }
  .top-nav .auth {
    outline: 1px solid yellow;
    width: auto;
    float: right; }
    .top-nav .auth li {
      display: inline-block;
      margin: 0 3px;
      /*&.h-business {
        a {
          border: 1px solid #00a6e6;
          color: #fff;
          background-color: #00a6e6;
        }
        &:hover {
          a {
            background: rgba(255, 255, 255, 0.5);
            color: #6cd6ff;
          }
        }
      }
      &.h-sign {
        a {
          border: 1px solid #fff;
          color: #fff;
          background-color: rgba(255, 255, 255, 0.5);
        }
      }*/ }
      .top-nav .auth li a {
        font-size: 12px;
        line-height: 27px;
        display: block;
        border: 1px solid #fff;
        color: #00a6e6;
        background: white;
        text-transform: uppercase;
        padding: 0 10px;
        -webkit-transition: all 200ms ease-in-out;
        transition: all 200ms ease-in-out;
        -webkit-border-radius: 15px;
        border-radius: 15px; }
        .top-nav .auth li a:hover {
          border: 1px solid #fff;
          background: rgba(255, 255, 255, 0.5);
          color: #fff; }

.select-drop-city {
  padding: 10px;
  display: none;
  width: 210px;
  position: absolute;
  top: 25px;
  left: 0;
  background-color: #fff;
  min-height: 300px; }

.main-top-bg {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;
  background-image: url("../img/photo-home-page.png"); }

.top-bg {
  background-color: #00a6e6; }

.box-1 {
  height: 45vh;
  text-align: center;
  padding: 10vh 0;
  color: #fff; }
  .box-1 h1 {
    font-size: 55px;
    line-height: 60px;
    margin-bottom: 40px;
    font-family: "Cera PRO", sans-serif;
    /*&:first-child {
      font-family: Arial;
    }*/ }
  .box-1 p {
    font-size: 22px;
    line-height: 25px; }

.search-header-mob {
  display: none; }

.footer {
  background-color: #003144;
  padding: 30px 0; }
  .footer footer {
    border-bottom: 1px solid #4c6e7c;
    padding-bottom: 30px; }
  .footer .logo {
    width: 175px; }
  .footer p {
    color: #868e92;
    line-height: 60px; }
  .footer .footer-social li {
    display: inline-block;
    margin-right: 5px; }
  .footer .footer-social a {
    -webkit-transition: all 200ms ease-in-out;
    transition: all 200ms ease-in-out; }
    .footer .footer-social a:before {
      font-size: 48px;
      color: #4c6e7c; }
    .footer .footer-social a:hover {
      opacity: 0.7; }
  .footer .footer-nav li {
    line-height: 50px; }
  .footer .footer-nav a {
    display: inline-block;
    line-height: 20px;
    color: #fff;
    vertical-align: middle;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    padding-bottom: 3px;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    position: relative;
    overflow: hidden; }
    .footer .footer-nav a:before {
      content: "";
      position: absolute;
      z-index: -1;
      left: 50%;
      right: 50%;
      bottom: 0;
      background: #ffffff;
      height: 2px;
      -webkit-transition-property: left, right;
      transition-property: left, right;
      -webkit-transition-duration: 0.3s;
      transition-duration: 0.3s;
      -webkit-transition-timing-function: ease-out;
      transition-timing-function: ease-out; }
    .footer .footer-nav a:hover:before {
      left: 0;
      right: 0; }

.pop_ups_all {
  display: none; }

#cboxContent {
  background-color: #ededed; }

.auth-container:after {
  display: block;
  content: '';
  clear: both; }

.auth-container h5 {
  font: 500 16px/20px "Roboto", sans-serif;
  color: #484748;
  text-align: center;
  margin-bottom: 15px; }

.auth-nav {
  font-size: 0; }
  .auth-nav li {
    background-color: transparent;
    cursor: pointer;
    font-size: 14px;
    text-align: center;
    width: 50%;
    font: 400 20px/60px "Cera PRO", sans-serif;
    color: #000;
    display: inline-block; }
    .auth-nav li.active {
      font-weight: 700;
      background-color: #fff; }

.auth-content {
  padding: 25px;
  background-color: #fff;
  margin-bottom: 30px;
  min-height: 420px; }
  .auth-content:after {
    display: block;
    content: '';
    clear: both; }

.auth-social {
  text-align: center; }
  .auth-social li {
    display: inline-block; }
  .auth-social a {
    font-size: 48px;
    margin: 0 20px;
    -webkit-transition: all 200ms ease-in-out;
    transition: all 200ms ease-in-out; }
    .auth-social a:hover {
      opacity: .7; }
    .auth-social a.i-vk-with-circle {
      color: #44678d; }
    .auth-social a.i-facebook-with-circle {
      color: #3a559f; }
    .auth-social a.i-google-with-circle {
      color: #dd4b39; }

@media screen and (max-width: 980px) {
  .box-1 {
    height: 235px;
    padding: 3vh 0; }
    .box-1 h1 {
      font-size: 48px;
      line-height: 50px;
      margin-bottom: 20px; }
    .box-1 p {
      font-size: 18px;
      line-height: 22px; } }

@media screen and (max-width: 880px) {
  #mobile_nav {
    display: block;
    z-index: 999999;
    width: 25px;
    height: 24px;
    position: absolute;
    left: 10px;
    top: 10px;
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
        transform: rotate(0deg);
    -webkit-transition: .5s ease-in-out;
    transition: .5s ease-in-out;
    cursor: pointer; }
    #mobile_nav span {
      display: block;
      position: absolute;
      height: 2px;
      width: 100%;
      background: #ffffff;
      opacity: 1;
      left: 0;
      -webkit-transform: rotate(0deg);
      -ms-transform: rotate(0deg);
          transform: rotate(0deg);
      -webkit-transition: .25s ease-in-out;
      transition: .25s ease-in-out; }
      #mobile_nav span:nth-child(1) {
        top: 0px;
        -webkit-transform-origin: left center;
        -ms-transform-origin: left center;
            transform-origin: left center; }
      #mobile_nav span:nth-child(2) {
        top: 11px;
        -webkit-transform-origin: left center;
        -ms-transform-origin: left center;
            transform-origin: left center; }
      #mobile_nav span:nth-child(3) {
        top: 23px;
        -webkit-transform-origin: left center;
        -ms-transform-origin: left center;
            transform-origin: left center; }
    #mobile_nav.open {
      left: 280px; }
      #mobile_nav.open span:nth-child(1) {
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg);
        top: 0;
        left: 0;
        width: 34px; }
      #mobile_nav.open span:nth-child(2) {
        width: 0%;
        opacity: 0; }
      #mobile_nav.open span:nth-child(3) {
        -webkit-transform: rotate(-45deg);
        -ms-transform: rotate(-45deg);
            transform: rotate(-45deg);
        top: 24px;
        left: 0;
        width: 34px; }
  .top-nav {
    position: relative;
    padding-top: 10px; }
    .top-nav .logo {
      float: none;
      margin: 0 auto; }
    .top-nav nav {
      position: fixed;
      left: -270px;
      bottom: 0;
      top: 0;
      width: 270px;
      background-color: #3bc8ff;
      z-index: 999999;
      -webkit-transition: all 0.5s ease-in-out;
      transition: all 0.5s ease-in-out; }
      .top-nav nav .nav {
        float: none;
        padding-top: 50px; }
        .top-nav nav .nav li {
          display: block;
          width: 100%;
          padding-left: 30px;
          margin-bottom: 30px; }
          .top-nav nav .nav li a {
            display: inline-block; }
      .top-nav nav .auth {
        float: none; }
        .top-nav nav .auth li {
          display: inline-block;
          width: 100%;
          padding-left: 30px;
          margin-bottom: 30px; }
          .top-nav nav .auth li a {
            display: inline-block; }
      .top-nav nav.nav-opener {
        height: 100%;
        left: 0; }
        .top-nav nav.nav-opener + #mob_bg {
          position: fixed;
          background-color: rgba(0, 0, 0, 0.4);
          display: block;
          left: 0;
          right: 0;
          bottom: 0;
          top: 0; } }

@media screen and (max-width: 768px) {
  .search-header-mob {
    display: block;
    position: absolute;
    left: 85px;
    top: 5px;
    right: 50px; }
    .search-header-mob input {
      -webkit-border-radius: 4px;
      border-radius: 4px;
      border: 1px solid #898b8d;
      width: 100%;
      height: 40px;
      line-height: 40px;
      padding-left: 5px;
      /* Firefox 19+ */
      /* Firefox 18- */ }
      .search-header-mob input:focus {
        outline: 0; }
      .search-header-mob input::-webkit-input-placeholder {
        color: #898b8d; }
      .search-header-mob input::-moz-placeholder {
        color: #898b8d; }
      .search-header-mob input:-moz-placeholder {
        color: #898b8d; }
      .search-header-mob input:-ms-input-placeholder {
        color: #898b8d; }
    .search-header-mob i {
      position: absolute;
      display: block;
      top: 5px; }
      .search-header-mob i.i-filter {
        right: -40px; }
        .search-header-mob i.i-filter:before {
          color: #fedc00;
          font-size: 24px; }
      .search-header-mob i.i-search {
        right: 2px; }
        .search-header-mob i.i-search:before {
          color: #898b8d;
          font-size: 24px; }
  .search-header .top-nav {
    padding-top: 5px;
    padding-bottom: 5px; }
  .search-header .logo {
    margin-left: 25px;
    max-width: 40px;
    width: 100%;
    float: left;
    height: 40px;
    background-position: center center;
    -webkit-background-size: contain;
    background-repeat: no-repeat;
    background-size: contain;
    background-image: url("../img/search-mob-logo.png"); }
  .box-1 h1 {
    font-size: 36px;
    line-height: 40px; }
  .footer {
    padding: 15px 0; }
    .footer .half-cont {
      width: 98%;
      float: none;
      margin: 0 auto; }
      .footer .half-cont .half-cont {
        width: 50%;
        float: left;
        margin: 0; }
    .footer footer {
      padding-bottom: 15px; }
    .footer .logo {
      width: 175px; }
    .footer p {
      color: #868e92;
      line-height: 40px; }
    .footer .footer-social li {
      display: inline-block;
      margin-right: 5px; }
    .footer .footer-social a {
      -webkit-transition: all 200ms ease-in-out;
      transition: all 200ms ease-in-out; }
      .footer .footer-social a:before {
        font-size: 48px;
        color: #4c6e7c; }
      .footer .footer-social a:hover {
        opacity: 0.7; }
    .footer .footer-nav li {
      line-height: 50px; }
    .footer .footer-nav a {
      display: inline-block;
      line-height: 20px;
      color: #fff;
      vertical-align: middle;
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
      padding-bottom: 3px;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -moz-osx-font-smoothing: grayscale;
      position: relative;
      overflow: hidden; }
      .footer .footer-nav a:before {
        content: "";
        position: absolute;
        z-index: -1;
        left: 50%;
        right: 50%;
        bottom: 0;
        background: #ffffff;
        height: 2px;
        -webkit-transition-property: left, right;
        transition-property: left, right;
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-timing-function: ease-out;
        transition-timing-function: ease-out; }
      .footer .footer-nav a:hover:before {
        left: 0;
        right: 0; } }

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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a0I7TUFDbEIsWUFBWTtNQUNaLHVCQUF1QjtNQUN2QixpQ0FBNkI7TUFDN0IseUJBQXFCO01BQ3JCLG9CQUFvQjtNQUVwQixvQ0FBb0M7TUFDcEMsNEJBQTRCO01BQzVCLG1DQUFtQztNQUNuQyxtQkFBbUI7TUFDbkIsaUJBQWlCLEVBd0JsQjtNQWpGTDtRQTJEUSxZQUFZO1FBQ1osbUJBQW1CO1FBQ25CLFlBQVk7UUFDWixVQUFVO1FBQ1YsV0FBVztRQUNYLFVBQVU7UUFDVixvQkFBb0I7UUFDcEIsWUFBWTtRQUNaLHlDQUF5QztRQUN6QyxpQ0FBaUM7UUFDakMsa0NBQWtDO1FBQ2xDLDBCQUEwQjtRQUMxQiw2Q0FBNkM7UUFDN0MscUNBQXFDLEVBQ3RDO01BekVQO1FBNkVVLFFBQVE7UUFDUixTQUFTLEVBQ1YsRUFBQSIsImZpbGUiOiJoZWFkZXIuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy9AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RXhvKzI6MzAwLDQwMCw1MDAsNjAwLDcwMCZzdWJzZXQ9Y3lyaWxsaWMnO1xyXG5cclxuJGJ0bl9jOiAjZmVkYzAwO1xyXG4kYmdfYzE6ICMzYmM4ZmY7XHJcbiRiZ19jMjogIzAwYTZlNjtcclxuJGJnX2Zvb3RlcjogIzAwMzE0NDtcclxuJHR4dF9jOiAjNDg0NzQ4O1xyXG5cclxuJGZmOiAnQ2VyYSBQUk8nLCBzYW5zLXNlcmlmO1xyXG4kZnI6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xyXG5cclxuLy9cclxuLy9NQVRFUklBTElaRSBGT1JNIFZBUlxyXG5cclxuXHJcblxyXG4vL1xyXG4vL1xyXG5cclxuXHJcbi8vXHJcbi8vX19fX19fX19fX19fX19fX01JWElOU1xyXG5AbWl4aW4gY2xyKCkge1xyXG4gICY6YWZ0ZXIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIGNsZWFyOiBib3RoO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGJyKCRyKSB7XHJcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAkcjtcclxuICAtbW96LWJvcmRlci1yYWRpdXM6ICRyO1xyXG4gIGJvcmRlci1yYWRpdXM6ICRyO1xyXG59XHJcblxyXG5AbWl4aW4gdHJhbnMoJHRpbWVzOjIwMG1zKSB7XHJcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG4gIC1tb3otdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbXMtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtby10cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG4gIHRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbn1cclxuQG1peGluIG9ubHlDZW50ZXJJbWcoJGhlaWdodDphdXRvLCAkd2lkdGg6IGF1dG8pe1xyXG4gIGhlaWdodDogJGhlaWdodDtcclxuICB3aWR0aDogJHdpZHRoO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcbiAgaW1ne1xyXG4gICAgbWF4LWhlaWdodDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gIH1cclxufVxyXG5cclxuLy9fX19fX19fX19fX19FTkQgTUlYSU5TXHJcbi8vXHJcbi5jb250IHtcclxuICBtYXgtd2lkdGg6IDEyMDBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBAaW5jbHVkZSBjbHI7XHJcblxyXG59XHJcblxyXG4uY29udC1mdWxsIHtcclxuICAvL2hlaWdodDo5MHZoO1xyXG5cclxuICB3aWR0aDogMTAwJTtcclxuICBAaW5jbHVkZSBjbHI7XHJcbn1cclxuXHJcblxyXG4iLCJAaW1wb3J0IFwidmFyXCI7XHJcblxyXG4jbW9iaWxlX25hdiB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuI21vYl9iZyB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLnRvcC1uYXYge1xyXG4gIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICB6LWluZGV4OiAxMDAwO1xyXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAubG9nbyB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIG1heC13aWR0aDogMTkwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgaGVpZ2h0OiAyN3B4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogbGVmdCBjZW50ZXI7XHJcbiAgICAtd2Via2l0LWJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvbG9nby0yLnBuZ1wiKTtcclxuICB9XHJcbiAgbmF2IHtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHllbGxvdztcclxuICB9XHJcbiAgLm5hdiB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGxpIHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogNDBweDtcclxuICAgICAgYSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnMoLjFzKTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcclxuXHJcbiAgICAgICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIHotaW5kZXg6IC0xO1xyXG4gICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgcmlnaHQ6IDUwJTtcclxuICAgICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmZmZmY7XHJcbiAgICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogbGVmdCwgcmlnaHQ7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBsZWZ0LCByaWdodDtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgfVxyXG4gIC5hdXRoIHtcclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCB5ZWxsb3c7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGxpIHtcclxuXHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgbWFyZ2luOiAwIDNweDtcclxuXHJcbiAgICAgIC8qJi5oLWJ1c2luZXNzIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMGE2ZTY7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGE2ZTY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICAgICAgICAgICAgY29sb3I6ICM2Y2Q2ZmY7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuaC1zaWduIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0qL1xyXG4gICAgICBhIHtcclxuICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICBjb2xvcjogIzAwYTZlNjtcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xyXG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIHRyYW5zKCk7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMTVweCk7XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbi5zZWxlY3QtZHJvcC1jaXR5IHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgd2lkdGg6IDIxMHB4O1xyXG4gIC8vb3V0bGluZTogNXB4IHNvbGlkIHJlZDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAyNXB4O1xyXG4gIGxlZnQ6IDA7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBtaW4taGVpZ2h0OiAzMDBweDtcclxuXHJcbn1cclxuXHJcbi5tYWluLXRvcC1iZyB7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3Bob3RvLWhvbWUtcGFnZS5wbmdcIik7XHJcbiAgLy9vdXRsaW5lOjJweCBzb2xpZCByZWQ7XHJcbn1cclxuXHJcbi50b3AtYmcge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxufVxyXG5cclxuLmJveC0xIHtcclxuICBoZWlnaHQ6IDQ1dmg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDEwdmggMDtcclxuICBjb2xvcjogI2ZmZjtcclxuICBoMSB7XHJcbiAgICBmb250LXNpemU6IDU1cHg7XHJcbiAgICBsaW5lLWhlaWdodDogNjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgLyomOmZpcnN0LWNoaWxkIHtcclxuICAgICAgZm9udC1mYW1pbHk6IEFyaWFsO1xyXG4gICAgfSovXHJcbiAgfVxyXG4gIHAge1xyXG4gICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgfVxyXG59XHJcblxyXG4uc2VhcmNoLWhlYWRlci1tb2Ige1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8vXHJcbi8vXHJcbi8vRk9PVEVSXHJcblxyXG4uZm9vdGVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAzMTQ0O1xyXG4gIHBhZGRpbmc6IDMwcHggMDtcclxuICBmb290ZXIge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM0YzZlN2M7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICB9XHJcbiAgLmxvZ28ge1xyXG4gICAgd2lkdGg6IDE3NXB4O1xyXG4gIH1cclxuICBwIHtcclxuICAgIGNvbG9yOiAjODY4ZTkyO1xyXG4gICAgbGluZS1oZWlnaHQ6IDYwcHg7XHJcblxyXG4gIH1cclxuICAuZm9vdGVyLXNvY2lhbCB7XHJcbiAgICBsaSB7XHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgICAgICBjb2xvcjogIzRjNmU3YztcclxuICAgICAgfVxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLmZvb3Rlci1uYXYge1xyXG4gICAgbGkge1xyXG4gICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuXHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XHJcbiAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7XHJcblxyXG4gICAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgcmlnaHQ6IDUwJTtcclxuICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmZmZmZjtcclxuICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgfVxyXG5cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9QT1BVUFNcclxuLnBvcF91cHNfYWxsIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4jY2JveENvbnRlbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZWQ7XHJcbn1cclxuXHJcbi5hdXRoLWNvbnRhaW5lciB7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxuICBoNSB7XHJcbiAgICBmb250OiA1MDAgMTZweC8yMHB4ICRmcjtcclxuICAgIGNvbG9yOiAkdHh0X2M7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gIH1cclxufVxyXG5cclxuLmF1dGgtbmF2IHtcclxuICBmb250LXNpemU6IDA7XHJcblxyXG4gIGxpIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgd2lkdGg6IDUwJTtcclxuICAgIGZvbnQ6IDQwMCAyMHB4LzYwcHggJGZmO1xyXG4gICAgY29sb3I6ICMwMDA7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAmLmFjdGl2ZSB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYXV0aC1jb250ZW50IHtcclxuICBwYWRkaW5nOiAyNXB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICBtaW4taGVpZ2h0OiA0MjBweDtcclxuICBAaW5jbHVkZSBjbHI7XHJcblxyXG59XHJcblxyXG4uYXV0aC1zb2NpYWwge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBsaSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblxyXG4gIH1cclxuICBhIHtcclxuICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgIG1hcmdpbjogMCAyMHB4O1xyXG4gICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBvcGFjaXR5OiAuNztcclxuICAgIH1cclxuICAgICYuaS12ay13aXRoLWNpcmNsZSB7XHJcbiAgICAgIGNvbG9yOiAjNDQ2NzhkO1xyXG4gICAgfVxyXG4gICAgJi5pLWZhY2Vib29rLXdpdGgtY2lyY2xlIHtcclxuICAgICAgY29sb3I6ICMzYTU1OWY7XHJcbiAgICB9XHJcbiAgICAmLmktZ29vZ2xlLXdpdGgtY2lyY2xlIHtcclxuICAgICAgY29sb3I6ICNkZDRiMzk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vL1JFU1BPTlNJVkVcclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmJveC0xIHtcclxuICAgIGhlaWdodDogMjM1cHg7XHJcblxyXG4gICAgcGFkZGluZzogM3ZoIDA7XHJcblxyXG4gICAgaDEge1xyXG4gICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG5cclxuICAgIH1cclxuICAgIHAge1xyXG5cclxuICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICBsaW5lLWhlaWdodDogMjJweDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDg4MHB4KSB7XHJcblxyXG4gICNtb2JpbGVfbmF2IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgei1pbmRleDogOTk5OTk5O1xyXG4gICAgd2lkdGg6IDI1cHg7XHJcbiAgICBoZWlnaHQ6IDI0cHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAxMHB4O1xyXG4gICAgdG9wOiAxMHB4O1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAuNXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAtbW96LXRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIC1vLXRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIHRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBzcGFuIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICBsZWZ0OiAwO1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLjI1cyBlYXNlLWluLW91dDtcclxuICAgICAgLW1vei10cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAtby10cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICB0cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAmOm50aC1jaGlsZCgxKSB7XHJcbiAgICAgICAgdG9wOiAwcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICB0b3A6IDExcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDMpIHtcclxuICAgICAgICB0b3A6IDIzcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgJi5vcGVuIHtcclxuICAgICAgbGVmdDogMjgwcHg7XHJcbiAgICAgIHNwYW46bnRoLWNoaWxkKDEpIHtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHdpZHRoOiAzNHB4O1xyXG4gICAgICB9XHJcbiAgICAgIHNwYW46bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICB3aWR0aDogMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgfVxyXG4gICAgICBzcGFuOm50aC1jaGlsZCgzKSB7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAgICAgdG9wOiAyNHB4O1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgd2lkdGg6IDM0cHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLnRvcC1uYXYge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XHJcbiAgICAubG9nbyB7XHJcbiAgICAgIGZsb2F0OiBub25lO1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuICAgIG5hdiB7XHJcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgbGVmdDogLTI3MHB4O1xyXG4gICAgICBib3R0b206IDA7XHJcbiAgICAgIHRvcDogMDtcclxuICAgICAgd2lkdGg6IDI3MHB4O1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgICAgIHotaW5kZXg6IDk5OTk5OTtcclxuICAgICAgQGluY2x1ZGUgdHJhbnMoLjVzKTtcclxuICAgICAgLm5hdiB7XHJcbiAgICAgICAgZmxvYXQ6IG5vbmU7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgLmF1dGgge1xyXG5cclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9kaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICYubmF2LW9wZW5lciB7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgKyAjbW9iX2JnIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gIC5zZWFyY2gtaGVhZGVyLW1vYiB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6ODVweDtcclxuICAgIHRvcDo1cHg7XHJcbiAgICByaWdodDo1MHB4O1xyXG4gICAgaW5wdXQge1xyXG4gICAgICBAaW5jbHVkZSBicig0cHgpO1xyXG4gICAgICBib3JkZXI6MXB4IHNvbGlkICM4OThiOGQ7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcclxuICAgICAgJjpmb2N1c3tcclxuICAgICAgICBvdXRsaW5lOjA7XHJcbiAgICAgIH1cclxuICAgICAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7Y29sb3I6Izg5OGI4ZDt9XHJcbiAgICAgICY6Oi1tb3otcGxhY2Vob2xkZXIgICAgICAgICAge2NvbG9yOiM4OThiOGQ7fS8qIEZpcmVmb3ggMTkrICovXHJcbiAgICAgICY6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICAge2NvbG9yOiM4OThiOGQ7fS8qIEZpcmVmb3ggMTgtICovXHJcbiAgICAgICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyICAgICAge2NvbG9yOiM4OThiOGQ7fVxyXG4gICAgfVxyXG4gICAgaXtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgdG9wOiA1cHg7XHJcbiAgICAgICYuaS1maWx0ZXJ7XHJcbiAgICAgICAgcmlnaHQ6IC00MHB4O1xyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIGNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuaS1zZWFyY2gge1xyXG4gICAgICAgIHJpZ2h0OiAycHg7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgY29sb3I6ICM4OThiOGQ7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICB9XHJcbiAgLnNlYXJjaC1oZWFkZXIge1xyXG4gICAgLnRvcC1uYXYge1xyXG4gICAgICBwYWRkaW5nLXRvcDogNXB4O1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xyXG4gICAgfVxyXG5cclxuICAgIC5sb2dvIHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDI1cHg7XHJcbiAgICAgIG1heC13aWR0aDogNDBweDtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XHJcbiAgICAgIC13ZWJraXQtYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4gICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zZWFyY2gtbW9iLWxvZ28ucG5nXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICAuYm94LTEge1xyXG5cclxuICAgIGgxIHtcclxuICAgICAgZm9udC1zaXplOiAzNnB4O1xyXG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuICAuZm9vdGVyIHtcclxuICAgIC5oYWxmLWNvbnQge1xyXG4gICAgICB3aWR0aDogOTglO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgIC5oYWxmLWNvbnQge1xyXG4gICAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYWRkaW5nOiAxNXB4IDA7XHJcbiAgICBmb290ZXIge1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcclxuICAgIH1cclxuICAgIC5sb2dvIHtcclxuICAgICAgd2lkdGg6IDE3NXB4O1xyXG4gICAgfVxyXG4gICAgcCB7XHJcbiAgICAgIGNvbG9yOiAjODY4ZTkyO1xyXG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuXHJcbiAgICB9XHJcbiAgICAuZm9vdGVyLXNvY2lhbCB7XHJcbiAgICAgIGxpIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgICAgICBjb2xvcjogIzRjNmU3YztcclxuICAgICAgICB9XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAuZm9vdGVyLW5hdiB7XHJcbiAgICAgIGxpIHtcclxuICAgICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuXHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7XHJcblxyXG4gICAgICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgIHJpZ2h0OiA1MCU7XHJcbiAgICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogbGVmdCwgcmlnaHQ7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vL1xyXG4vL1xyXG4vL0Zvb3RlciJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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a0I7TUFDbEIsWUFBWTtNQUNaLHVCQUF1QjtNQUN2QixpQ0FBNkI7TUFDN0IseUJBQXFCO01BQ3JCLG9CQUFvQjtNQUVwQixvQ0FBb0M7TUFDcEMsNEJBQTRCO01BQzVCLG1DQUFtQztNQUNuQyxtQkFBbUI7TUFDbkIsaUJBQWlCLEVBd0JsQjtNQWpGTDtRQTJEUSxZQUFZO1FBQ1osbUJBQW1CO1FBQ25CLFlBQVk7UUFDWixVQUFVO1FBQ1YsV0FBVztRQUNYLFVBQVU7UUFDVixvQkFBb0I7UUFDcEIsWUFBWTtRQUNaLHlDQUF5QztRQUN6QyxpQ0FBaUM7UUFDakMsa0NBQWtDO1FBQ2xDLDBCQUEwQjtRQUMxQiw2Q0FBNkM7UUFDN0MscUNBQXFDLEVBQ3RDO01BekVQO1FBNkVVLFFBQVE7UUFDUixTQUFTLEVBQ1YsRUFBQSIsImZpbGUiOiJoZWFkZXIuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy9AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RXhvKzI6MzAwLDQwMCw1MDAsNjAwLDcwMCZzdWJzZXQ9Y3lyaWxsaWMnO1xyXG5cclxuJGJ0bl9jOiAjZmVkYzAwO1xyXG4kYmdfYzE6ICMzYmM4ZmY7XHJcbiRiZ19jMjogIzAwYTZlNjtcclxuJGJnX2Zvb3RlcjogIzAwMzE0NDtcclxuJHR4dF9jOiAjNDg0NzQ4O1xyXG5cclxuJGZmOiAnQ2VyYSBQUk8nLCBzYW5zLXNlcmlmO1xyXG4kZnI6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xyXG5cclxuLy9cclxuLy9NQVRFUklBTElaRSBGT1JNIFZBUlxyXG5cclxuXHJcblxyXG4vL1xyXG4vL1xyXG5cclxuXHJcbi8vXHJcbi8vX19fX19fX19fX19fX19fX01JWElOU1xyXG5AbWl4aW4gY2xyKCkge1xyXG4gICY6YWZ0ZXIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIGNsZWFyOiBib3RoO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGJyKCRyKSB7XHJcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAkcjtcclxuICAtbW96LWJvcmRlci1yYWRpdXM6ICRyO1xyXG4gIGJvcmRlci1yYWRpdXM6ICRyO1xyXG59XHJcblxyXG5AbWl4aW4gdHJhbnMoJHRpbWVzOjIwMG1zKSB7XHJcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG4gIC1tb3otdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbXMtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtby10cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG4gIHRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbn1cclxuQG1peGluIG9ubHlDZW50ZXJJbWcoJGhlaWdodDphdXRvLCAkd2lkdGg6IGF1dG8pe1xyXG4gIGhlaWdodDogJGhlaWdodDtcclxuICB3aWR0aDogJHdpZHRoO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcbiAgaW1ne1xyXG4gICAgbWF4LWhlaWdodDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gIH1cclxufVxyXG5cclxuLy9fX19fX19fX19fX19FTkQgTUlYSU5TXHJcbi8vXHJcbi5jb250IHtcclxuICBtYXgtd2lkdGg6IDEyMDBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBAaW5jbHVkZSBjbHI7XHJcblxyXG59XHJcblxyXG4uY29udC1mdWxsIHtcclxuICAvL2hlaWdodDo5MHZoO1xyXG5cclxuICB3aWR0aDogMTAwJTtcclxuICBAaW5jbHVkZSBjbHI7XHJcbn1cclxuXHJcblxyXG4iLCJAaW1wb3J0IFwidmFyXCI7XHJcblxyXG4jbW9iaWxlX25hdiB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuI21vYl9iZyB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLnRvcC1uYXYge1xyXG4gIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICB6LWluZGV4OiAxMDAwO1xyXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAubG9nbyB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIG1heC13aWR0aDogMTkwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgaGVpZ2h0OiAyN3B4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogbGVmdCBjZW50ZXI7XHJcbiAgICAtd2Via2l0LWJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvbG9nby0yLnBuZ1wiKTtcclxuICB9XHJcbiAgbmF2IHtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHllbGxvdztcclxuICB9XHJcbiAgLm5hdiB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGxpIHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogNDBweDtcclxuICAgICAgYSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnMoLjFzKTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcclxuXHJcbiAgICAgICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIHotaW5kZXg6IC0xO1xyXG4gICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgcmlnaHQ6IDUwJTtcclxuICAgICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmZmZmY7XHJcbiAgICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogbGVmdCwgcmlnaHQ7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBsZWZ0LCByaWdodDtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgfVxyXG4gIC5hdXRoIHtcclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCB5ZWxsb3c7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGxpIHtcclxuXHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgbWFyZ2luOiAwIDNweDtcclxuXHJcbiAgICAgIC8qJi5oLWJ1c2luZXNzIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMGE2ZTY7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGE2ZTY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICAgICAgICAgICAgY29sb3I6ICM2Y2Q2ZmY7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuaC1zaWduIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0qL1xyXG4gICAgICBhIHtcclxuICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICBjb2xvcjogIzAwYTZlNjtcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xyXG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIHRyYW5zKCk7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMTVweCk7XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbi5zZWxlY3QtZHJvcC1jaXR5IHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgd2lkdGg6IDIxMHB4O1xyXG4gIC8vb3V0bGluZTogNXB4IHNvbGlkIHJlZDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAyNXB4O1xyXG4gIGxlZnQ6IDA7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBtaW4taGVpZ2h0OiAzMDBweDtcclxuXHJcbn1cclxuXHJcbi5tYWluLXRvcC1iZyB7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3Bob3RvLWhvbWUtcGFnZS5wbmdcIik7XHJcbiAgLy9vdXRsaW5lOjJweCBzb2xpZCByZWQ7XHJcbn1cclxuXHJcbi50b3AtYmcge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxufVxyXG5cclxuLmJveC0xIHtcclxuICBoZWlnaHQ6IDQ1dmg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDEwdmggMDtcclxuICBjb2xvcjogI2ZmZjtcclxuICBoMSB7XHJcbiAgICBmb250LXNpemU6IDU1cHg7XHJcbiAgICBsaW5lLWhlaWdodDogNjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgLyomOmZpcnN0LWNoaWxkIHtcclxuICAgICAgZm9udC1mYW1pbHk6IEFyaWFsO1xyXG4gICAgfSovXHJcbiAgfVxyXG4gIHAge1xyXG4gICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgfVxyXG59XHJcblxyXG4uc2VhcmNoLWhlYWRlci1tb2Ige1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8vXHJcbi8vXHJcbi8vRk9PVEVSXHJcblxyXG4uZm9vdGVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAzMTQ0O1xyXG4gIHBhZGRpbmc6IDMwcHggMDtcclxuICBmb290ZXIge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM0YzZlN2M7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICB9XHJcbiAgLmxvZ28ge1xyXG4gICAgd2lkdGg6IDE3NXB4O1xyXG4gIH1cclxuICBwIHtcclxuICAgIGNvbG9yOiAjODY4ZTkyO1xyXG4gICAgbGluZS1oZWlnaHQ6IDYwcHg7XHJcblxyXG4gIH1cclxuICAuZm9vdGVyLXNvY2lhbCB7XHJcbiAgICBsaSB7XHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgICAgICBjb2xvcjogIzRjNmU3YztcclxuICAgICAgfVxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLmZvb3Rlci1uYXYge1xyXG4gICAgbGkge1xyXG4gICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuXHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XHJcbiAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7XHJcblxyXG4gICAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgcmlnaHQ6IDUwJTtcclxuICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmZmZmZjtcclxuICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgfVxyXG5cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9QT1BVUFNcclxuLnBvcF91cHNfYWxsIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4jY2JveENvbnRlbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZWQ7XHJcbn1cclxuXHJcbi5hdXRoLWNvbnRhaW5lciB7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxuICBoNSB7XHJcbiAgICBmb250OiA1MDAgMTZweC8yMHB4ICRmcjtcclxuICAgIGNvbG9yOiAkdHh0X2M7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gIH1cclxufVxyXG5cclxuLmF1dGgtbmF2IHtcclxuICBmb250LXNpemU6IDA7XHJcblxyXG4gIGxpIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgd2lkdGg6IDUwJTtcclxuICAgIGZvbnQ6IDQwMCAyMHB4LzYwcHggJGZmO1xyXG4gICAgY29sb3I6ICMwMDA7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAmLmFjdGl2ZSB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYXV0aC1jb250ZW50IHtcclxuICBwYWRkaW5nOiAyNXB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICBtaW4taGVpZ2h0OiA0MjBweDtcclxuICBAaW5jbHVkZSBjbHI7XHJcblxyXG59XHJcblxyXG4uYXV0aC1zb2NpYWwge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBsaSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblxyXG4gIH1cclxuICBhIHtcclxuICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgIG1hcmdpbjogMCAyMHB4O1xyXG4gICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBvcGFjaXR5OiAuNztcclxuICAgIH1cclxuICAgICYuaS12ay13aXRoLWNpcmNsZSB7XHJcbiAgICAgIGNvbG9yOiAjNDQ2NzhkO1xyXG4gICAgfVxyXG4gICAgJi5pLWZhY2Vib29rLXdpdGgtY2lyY2xlIHtcclxuICAgICAgY29sb3I6ICMzYTU1OWY7XHJcbiAgICB9XHJcbiAgICAmLmktZ29vZ2xlLXdpdGgtY2lyY2xlIHtcclxuICAgICAgY29sb3I6ICNkZDRiMzk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vL1JFU1BPTlNJVkVcclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmJveC0xIHtcclxuICAgIGhlaWdodDogMjM1cHg7XHJcblxyXG4gICAgcGFkZGluZzogM3ZoIDA7XHJcblxyXG4gICAgaDEge1xyXG4gICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG5cclxuICAgIH1cclxuICAgIHAge1xyXG5cclxuICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICBsaW5lLWhlaWdodDogMjJweDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDg4MHB4KSB7XHJcblxyXG4gICNtb2JpbGVfbmF2IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgei1pbmRleDogOTk5OTk5O1xyXG4gICAgd2lkdGg6IDI1cHg7XHJcbiAgICBoZWlnaHQ6IDI0cHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAxMHB4O1xyXG4gICAgdG9wOiAxMHB4O1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAuNXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAtbW96LXRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIC1vLXRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIHRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBzcGFuIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICBsZWZ0OiAwO1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLjI1cyBlYXNlLWluLW91dDtcclxuICAgICAgLW1vei10cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAtby10cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICB0cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAmOm50aC1jaGlsZCgxKSB7XHJcbiAgICAgICAgdG9wOiAwcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICB0b3A6IDExcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDMpIHtcclxuICAgICAgICB0b3A6IDIzcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgJi5vcGVuIHtcclxuICAgICAgbGVmdDogMjgwcHg7XHJcbiAgICAgIHNwYW46bnRoLWNoaWxkKDEpIHtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHdpZHRoOiAzNHB4O1xyXG4gICAgICB9XHJcbiAgICAgIHNwYW46bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICB3aWR0aDogMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgfVxyXG4gICAgICBzcGFuOm50aC1jaGlsZCgzKSB7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAgICAgdG9wOiAyNHB4O1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgd2lkdGg6IDM0cHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLnRvcC1uYXYge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XHJcbiAgICAubG9nbyB7XHJcbiAgICAgIGZsb2F0OiBub25lO1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuICAgIG5hdiB7XHJcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgbGVmdDogLTI3MHB4O1xyXG4gICAgICBib3R0b206IDA7XHJcbiAgICAgIHRvcDogMDtcclxuICAgICAgd2lkdGg6IDI3MHB4O1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgICAgIHotaW5kZXg6IDk5OTk5OTtcclxuICAgICAgQGluY2x1ZGUgdHJhbnMoLjVzKTtcclxuICAgICAgLm5hdiB7XHJcbiAgICAgICAgZmxvYXQ6IG5vbmU7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgLmF1dGgge1xyXG5cclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9kaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICYubmF2LW9wZW5lciB7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgKyAjbW9iX2JnIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gIC5zZWFyY2gtaGVhZGVyLW1vYiB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6ODVweDtcclxuICAgIHRvcDo1cHg7XHJcbiAgICByaWdodDo1MHB4O1xyXG4gICAgaW5wdXQge1xyXG4gICAgICBAaW5jbHVkZSBicig0cHgpO1xyXG4gICAgICBib3JkZXI6MXB4IHNvbGlkICM4OThiOGQ7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcclxuICAgICAgJjpmb2N1c3tcclxuICAgICAgICBvdXRsaW5lOjA7XHJcbiAgICAgIH1cclxuICAgICAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7Y29sb3I6Izg5OGI4ZDt9XHJcbiAgICAgICY6Oi1tb3otcGxhY2Vob2xkZXIgICAgICAgICAge2NvbG9yOiM4OThiOGQ7fS8qIEZpcmVmb3ggMTkrICovXHJcbiAgICAgICY6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICAge2NvbG9yOiM4OThiOGQ7fS8qIEZpcmVmb3ggMTgtICovXHJcbiAgICAgICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyICAgICAge2NvbG9yOiM4OThiOGQ7fVxyXG4gICAgfVxyXG4gICAgaXtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgdG9wOiA1cHg7XHJcbiAgICAgICYuaS1maWx0ZXJ7XHJcbiAgICAgICAgcmlnaHQ6IC00MHB4O1xyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIGNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuaS1zZWFyY2gge1xyXG4gICAgICAgIHJpZ2h0OiAycHg7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgY29sb3I6ICM4OThiOGQ7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICB9XHJcbiAgLnNlYXJjaC1oZWFkZXIge1xyXG4gICAgLnRvcC1uYXYge1xyXG4gICAgICBwYWRkaW5nLXRvcDogNXB4O1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xyXG4gICAgfVxyXG5cclxuICAgIC5sb2dvIHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDI1cHg7XHJcbiAgICAgIG1heC13aWR0aDogNDBweDtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XHJcbiAgICAgIC13ZWJraXQtYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4gICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zZWFyY2gtbW9iLWxvZ28ucG5nXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICAuYm94LTEge1xyXG5cclxuICAgIGgxIHtcclxuICAgICAgZm9udC1zaXplOiAzNnB4O1xyXG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuICAuZm9vdGVyIHtcclxuICAgIC5oYWxmLWNvbnQge1xyXG4gICAgICB3aWR0aDogOTglO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgIC5oYWxmLWNvbnQge1xyXG4gICAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYWRkaW5nOiAxNXB4IDA7XHJcbiAgICBmb290ZXIge1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcclxuICAgIH1cclxuICAgIC5sb2dvIHtcclxuICAgICAgd2lkdGg6IDE3NXB4O1xyXG4gICAgfVxyXG4gICAgcCB7XHJcbiAgICAgIGNvbG9yOiAjODY4ZTkyO1xyXG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuXHJcbiAgICB9XHJcbiAgICAuZm9vdGVyLXNvY2lhbCB7XHJcbiAgICAgIGxpIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgICAgICBjb2xvcjogIzRjNmU3YztcclxuICAgICAgICB9XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAuZm9vdGVyLW5hdiB7XHJcbiAgICAgIGxpIHtcclxuICAgICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuXHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7XHJcblxyXG4gICAgICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgIHJpZ2h0OiA1MCU7XHJcbiAgICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogbGVmdCwgcmlnaHQ7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vL1xyXG4vL1xyXG4vL0Zvb3RlciJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64,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a0I7TUFDbEIsWUFBWTtNQUNaLHVCQUF1QjtNQUN2QixpQ0FBNkI7TUFDN0IseUJBQXFCO01BQ3JCLG9CQUFvQjtNQUVwQixvQ0FBb0M7TUFDcEMsNEJBQTRCO01BQzVCLG1DQUFtQztNQUNuQyxtQkFBbUI7TUFDbkIsaUJBQWlCLEVBd0JsQjtNQWpGTDtRQTJEUSxZQUFZO1FBQ1osbUJBQW1CO1FBQ25CLFlBQVk7UUFDWixVQUFVO1FBQ1YsV0FBVztRQUNYLFVBQVU7UUFDVixvQkFBb0I7UUFDcEIsWUFBWTtRQUNaLHlDQUF5QztRQUN6QyxpQ0FBaUM7UUFDakMsa0NBQWtDO1FBQ2xDLDBCQUEwQjtRQUMxQiw2Q0FBNkM7UUFDN0MscUNBQXFDLEVBQ3RDO01BekVQO1FBNkVVLFFBQVE7UUFDUixTQUFTLEVBQ1YsRUFBQSIsImZpbGUiOiJoZWFkZXIuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy9AaW1wb3J0ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RXhvKzI6MzAwLDQwMCw1MDAsNjAwLDcwMCZzdWJzZXQ9Y3lyaWxsaWMnO1xyXG5cclxuJGJ0bl9jOiAjZmVkYzAwO1xyXG4kYmdfYzE6ICMzYmM4ZmY7XHJcbiRiZ19jMjogIzAwYTZlNjtcclxuJGJnX2Zvb3RlcjogIzAwMzE0NDtcclxuJHR4dF9jOiAjNDg0NzQ4O1xyXG5cclxuJGZmOiAnQ2VyYSBQUk8nLCBzYW5zLXNlcmlmO1xyXG4kZnI6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xyXG5cclxuLy9cclxuLy9NQVRFUklBTElaRSBGT1JNIFZBUlxyXG5cclxuXHJcblxyXG4vL1xyXG4vL1xyXG5cclxuXHJcbi8vXHJcbi8vX19fX19fX19fX19fX19fX01JWElOU1xyXG5AbWl4aW4gY2xyKCkge1xyXG4gICY6YWZ0ZXIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIGNsZWFyOiBib3RoO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGJyKCRyKSB7XHJcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAkcjtcclxuICAtbW96LWJvcmRlci1yYWRpdXM6ICRyO1xyXG4gIGJvcmRlci1yYWRpdXM6ICRyO1xyXG59XHJcblxyXG5AbWl4aW4gdHJhbnMoJHRpbWVzOjIwMG1zKSB7XHJcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG4gIC1tb3otdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtbXMtdHJhbnNpdGlvbjogYWxsICR0aW1lcyBlYXNlLWluLW91dDtcclxuICAtby10cmFuc2l0aW9uOiBhbGwgJHRpbWVzIGVhc2UtaW4tb3V0O1xyXG4gIHRyYW5zaXRpb246IGFsbCAkdGltZXMgZWFzZS1pbi1vdXQ7XHJcbn1cclxuQG1peGluIG9ubHlDZW50ZXJJbWcoJGhlaWdodDphdXRvLCAkd2lkdGg6IGF1dG8pe1xyXG4gIGhlaWdodDogJGhlaWdodDtcclxuICB3aWR0aDogJHdpZHRoO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcbiAgaW1ne1xyXG4gICAgbWF4LWhlaWdodDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gIH1cclxufVxyXG5cclxuLy9fX19fX19fX19fX19FTkQgTUlYSU5TXHJcbi8vXHJcbi5jb250IHtcclxuICBtYXgtd2lkdGg6IDEyMDBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBAaW5jbHVkZSBjbHI7XHJcblxyXG59XHJcblxyXG4uY29udC1mdWxsIHtcclxuICAvL2hlaWdodDo5MHZoO1xyXG5cclxuICB3aWR0aDogMTAwJTtcclxuICBAaW5jbHVkZSBjbHI7XHJcbn1cclxuXHJcblxyXG4iLCJAaW1wb3J0IFwidmFyXCI7XHJcblxyXG4jbW9iaWxlX25hdiB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuI21vYl9iZyB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLnRvcC1uYXYge1xyXG4gIC8vb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcclxuICB6LWluZGV4OiAxMDAwO1xyXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAubG9nbyB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIG1heC13aWR0aDogMTkwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgaGVpZ2h0OiAyN3B4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogbGVmdCBjZW50ZXI7XHJcbiAgICAtd2Via2l0LWJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvbG9nby0yLnBuZ1wiKTtcclxuICB9XHJcbiAgbmF2IHtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIC8vb3V0bGluZTogMXB4IHNvbGlkIHllbGxvdztcclxuICB9XHJcbiAgLm5hdiB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIGxpIHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogNDBweDtcclxuICAgICAgYSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnMoLjFzKTtcclxuICAgICAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcclxuXHJcbiAgICAgICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIHotaW5kZXg6IC0xO1xyXG4gICAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgICAgcmlnaHQ6IDUwJTtcclxuICAgICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmZmZmY7XHJcbiAgICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogbGVmdCwgcmlnaHQ7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBsZWZ0LCByaWdodDtcclxuICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCByZWQ7XHJcbiAgfVxyXG4gIC5hdXRoIHtcclxuICAgIG91dGxpbmU6IDFweCBzb2xpZCB5ZWxsb3c7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICAgIGZsb2F0OiByaWdodDtcclxuICAgIGxpIHtcclxuXHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgbWFyZ2luOiAwIDNweDtcclxuXHJcbiAgICAgIC8qJi5oLWJ1c2luZXNzIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMGE2ZTY7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGE2ZTY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICAgICAgICAgICAgY29sb3I6ICM2Y2Q2ZmY7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuaC1zaWduIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmZmY7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0qL1xyXG4gICAgICBhIHtcclxuICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjtcclxuICAgICAgICBjb2xvcjogIzAwYTZlNjtcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xyXG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xyXG4gICAgICAgIEBpbmNsdWRlIHRyYW5zKCk7XHJcbiAgICAgICAgQGluY2x1ZGUgYnIoMTVweCk7XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbi5zZWxlY3QtZHJvcC1jaXR5IHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgd2lkdGg6IDIxMHB4O1xyXG4gIC8vb3V0bGluZTogNXB4IHNvbGlkIHJlZDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAyNXB4O1xyXG4gIGxlZnQ6IDA7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBtaW4taGVpZ2h0OiAzMDBweDtcclxuXHJcbn1cclxuXHJcbi5tYWluLXRvcC1iZyB7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3Bob3RvLWhvbWUtcGFnZS5wbmdcIik7XHJcbiAgLy9vdXRsaW5lOjJweCBzb2xpZCByZWQ7XHJcbn1cclxuXHJcbi50b3AtYmcge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRiZ19jMjtcclxufVxyXG5cclxuLmJveC0xIHtcclxuICBoZWlnaHQ6IDQ1dmg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDEwdmggMDtcclxuICBjb2xvcjogI2ZmZjtcclxuICBoMSB7XHJcbiAgICBmb250LXNpemU6IDU1cHg7XHJcbiAgICBsaW5lLWhlaWdodDogNjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICBmb250LWZhbWlseTogJGZmO1xyXG4gICAgLyomOmZpcnN0LWNoaWxkIHtcclxuICAgICAgZm9udC1mYW1pbHk6IEFyaWFsO1xyXG4gICAgfSovXHJcbiAgfVxyXG4gIHAge1xyXG4gICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI1cHg7XHJcbiAgfVxyXG59XHJcblxyXG4uc2VhcmNoLWhlYWRlci1tb2Ige1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8vXHJcbi8vXHJcbi8vRk9PVEVSXHJcblxyXG4uZm9vdGVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAzMTQ0O1xyXG4gIHBhZGRpbmc6IDMwcHggMDtcclxuICBmb290ZXIge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM0YzZlN2M7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICB9XHJcbiAgLmxvZ28ge1xyXG4gICAgd2lkdGg6IDE3NXB4O1xyXG4gIH1cclxuICBwIHtcclxuICAgIGNvbG9yOiAjODY4ZTkyO1xyXG4gICAgbGluZS1oZWlnaHQ6IDYwcHg7XHJcblxyXG4gIH1cclxuICAuZm9vdGVyLXNvY2lhbCB7XHJcbiAgICBsaSB7XHJcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgICAgICBjb2xvcjogIzRjNmU3YztcclxuICAgICAgfVxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLmZvb3Rlci1uYXYge1xyXG4gICAgbGkge1xyXG4gICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuXHJcbiAgICB9XHJcbiAgICBhIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XHJcbiAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7XHJcblxyXG4gICAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgcmlnaHQ6IDUwJTtcclxuICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmZmZmZjtcclxuICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgICAgfVxyXG5cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy9cclxuLy9cclxuLy9QT1BVUFNcclxuLnBvcF91cHNfYWxsIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4jY2JveENvbnRlbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZWQ7XHJcbn1cclxuXHJcbi5hdXRoLWNvbnRhaW5lciB7XHJcbiAgQGluY2x1ZGUgY2xyO1xyXG5cclxuICBoNSB7XHJcbiAgICBmb250OiA1MDAgMTZweC8yMHB4ICRmcjtcclxuICAgIGNvbG9yOiAkdHh0X2M7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gIH1cclxufVxyXG5cclxuLmF1dGgtbmF2IHtcclxuICBmb250LXNpemU6IDA7XHJcblxyXG4gIGxpIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgd2lkdGg6IDUwJTtcclxuICAgIGZvbnQ6IDQwMCAyMHB4LzYwcHggJGZmO1xyXG4gICAgY29sb3I6ICMwMDA7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAmLmFjdGl2ZSB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uYXV0aC1jb250ZW50IHtcclxuICBwYWRkaW5nOiAyNXB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICBtaW4taGVpZ2h0OiA0MjBweDtcclxuICBAaW5jbHVkZSBjbHI7XHJcblxyXG59XHJcblxyXG4uYXV0aC1zb2NpYWwge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBsaSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblxyXG4gIH1cclxuICBhIHtcclxuICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgIG1hcmdpbjogMCAyMHB4O1xyXG4gICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBvcGFjaXR5OiAuNztcclxuICAgIH1cclxuICAgICYuaS12ay13aXRoLWNpcmNsZSB7XHJcbiAgICAgIGNvbG9yOiAjNDQ2NzhkO1xyXG4gICAgfVxyXG4gICAgJi5pLWZhY2Vib29rLXdpdGgtY2lyY2xlIHtcclxuICAgICAgY29sb3I6ICMzYTU1OWY7XHJcbiAgICB9XHJcbiAgICAmLmktZ29vZ2xlLXdpdGgtY2lyY2xlIHtcclxuICAgICAgY29sb3I6ICNkZDRiMzk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vL1JFU1BPTlNJVkVcclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk4MHB4KSB7XHJcbiAgLmJveC0xIHtcclxuICAgIGhlaWdodDogMjM1cHg7XHJcblxyXG4gICAgcGFkZGluZzogM3ZoIDA7XHJcblxyXG4gICAgaDEge1xyXG4gICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG5cclxuICAgIH1cclxuICAgIHAge1xyXG5cclxuICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICBsaW5lLWhlaWdodDogMjJweDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDg4MHB4KSB7XHJcblxyXG4gICNtb2JpbGVfbmF2IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgei1pbmRleDogOTk5OTk5O1xyXG4gICAgd2lkdGg6IDI1cHg7XHJcbiAgICBoZWlnaHQ6IDI0cHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAxMHB4O1xyXG4gICAgdG9wOiAxMHB4O1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAuNXMgZWFzZS1pbi1vdXQ7XHJcbiAgICAtbW96LXRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIC1vLXRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIHRyYW5zaXRpb246IC41cyBlYXNlLWluLW91dDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBzcGFuIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICBsZWZ0OiAwO1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogLjI1cyBlYXNlLWluLW91dDtcclxuICAgICAgLW1vei10cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAtby10cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICB0cmFuc2l0aW9uOiAuMjVzIGVhc2UtaW4tb3V0O1xyXG4gICAgICAmOm50aC1jaGlsZCgxKSB7XHJcbiAgICAgICAgdG9wOiAwcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICB0b3A6IDExcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDMpIHtcclxuICAgICAgICB0b3A6IDIzcHg7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGNlbnRlcjtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIC1vLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgY2VudGVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgJi5vcGVuIHtcclxuICAgICAgbGVmdDogMjgwcHg7XHJcbiAgICAgIHNwYW46bnRoLWNoaWxkKDEpIHtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHdpZHRoOiAzNHB4O1xyXG4gICAgICB9XHJcbiAgICAgIHNwYW46bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICB3aWR0aDogMCU7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgfVxyXG4gICAgICBzcGFuOm50aC1jaGlsZCgzKSB7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcclxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XHJcbiAgICAgICAgdG9wOiAyNHB4O1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgd2lkdGg6IDM0cHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLnRvcC1uYXYge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XHJcbiAgICAubG9nbyB7XHJcbiAgICAgIGZsb2F0OiBub25lO1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuICAgIG5hdiB7XHJcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgbGVmdDogLTI3MHB4O1xyXG4gICAgICBib3R0b206IDA7XHJcbiAgICAgIHRvcDogMDtcclxuICAgICAgd2lkdGg6IDI3MHB4O1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfYzE7XHJcbiAgICAgIHotaW5kZXg6IDk5OTk5OTtcclxuICAgICAgQGluY2x1ZGUgdHJhbnMoLjVzKTtcclxuICAgICAgLm5hdiB7XHJcbiAgICAgICAgZmxvYXQ6IG5vbmU7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgLmF1dGgge1xyXG5cclxuICAgICAgICBmbG9hdDogbm9uZTtcclxuXHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG4gICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9kaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICYubmF2LW9wZW5lciB7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgKyAjbW9iX2JnIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gIC5zZWFyY2gtaGVhZGVyLW1vYiB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6ODVweDtcclxuICAgIHRvcDo1cHg7XHJcbiAgICByaWdodDo1MHB4O1xyXG4gICAgaW5wdXQge1xyXG4gICAgICBAaW5jbHVkZSBicig0cHgpO1xyXG4gICAgICBib3JkZXI6MXB4IHNvbGlkICM4OThiOGQ7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcclxuICAgICAgJjpmb2N1c3tcclxuICAgICAgICBvdXRsaW5lOjA7XHJcbiAgICAgIH1cclxuICAgICAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7Y29sb3I6Izg5OGI4ZDt9XHJcbiAgICAgICY6Oi1tb3otcGxhY2Vob2xkZXIgICAgICAgICAge2NvbG9yOiM4OThiOGQ7fS8qIEZpcmVmb3ggMTkrICovXHJcbiAgICAgICY6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICAge2NvbG9yOiM4OThiOGQ7fS8qIEZpcmVmb3ggMTgtICovXHJcbiAgICAgICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyICAgICAge2NvbG9yOiM4OThiOGQ7fVxyXG4gICAgfVxyXG4gICAgaXtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgdG9wOiA1cHg7XHJcbiAgICAgICYuaS1maWx0ZXJ7XHJcbiAgICAgICAgcmlnaHQ6IC00MHB4O1xyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIGNvbG9yOiAkYnRuX2M7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuaS1zZWFyY2gge1xyXG4gICAgICAgIHJpZ2h0OiAycHg7XHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgY29sb3I6ICM4OThiOGQ7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICB9XHJcbiAgLnNlYXJjaC1oZWFkZXIge1xyXG4gICAgLnRvcC1uYXYge1xyXG4gICAgICBwYWRkaW5nLXRvcDogNXB4O1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xyXG4gICAgfVxyXG5cclxuICAgIC5sb2dvIHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDI1cHg7XHJcbiAgICAgIG1heC13aWR0aDogNDBweDtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XHJcbiAgICAgIC13ZWJraXQtYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4gICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XHJcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zZWFyY2gtbW9iLWxvZ28ucG5nXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICAuYm94LTEge1xyXG5cclxuICAgIGgxIHtcclxuICAgICAgZm9udC1zaXplOiAzNnB4O1xyXG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuICAuZm9vdGVyIHtcclxuICAgIC5oYWxmLWNvbnQge1xyXG4gICAgICB3aWR0aDogOTglO1xyXG4gICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgIC5oYWxmLWNvbnQge1xyXG4gICAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYWRkaW5nOiAxNXB4IDA7XHJcbiAgICBmb290ZXIge1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcclxuICAgIH1cclxuICAgIC5sb2dvIHtcclxuICAgICAgd2lkdGg6IDE3NXB4O1xyXG4gICAgfVxyXG4gICAgcCB7XHJcbiAgICAgIGNvbG9yOiAjODY4ZTkyO1xyXG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuXHJcbiAgICB9XHJcbiAgICAuZm9vdGVyLXNvY2lhbCB7XHJcbiAgICAgIGxpIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgQGluY2x1ZGUgdHJhbnMoKTtcclxuICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgICAgICBjb2xvcjogIzRjNmU3YztcclxuICAgICAgICB9XHJcbiAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICBvcGFjaXR5OiAwLjc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAuZm9vdGVyLW5hdiB7XHJcbiAgICAgIGxpIHtcclxuICAgICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuXHJcbiAgICAgIH1cclxuICAgICAgYSB7XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7XHJcblxyXG4gICAgICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgIHJpZ2h0OiA1MCU7XHJcbiAgICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHJpZ2h0O1xyXG4gICAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogbGVmdCwgcmlnaHQ7XHJcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xyXG4gICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vL1xyXG4vL1xyXG4vL0Zvb3RlciJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */
