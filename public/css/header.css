.cont {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto; }
  .cont:after {
    display: block;
    content: '';
    clear: both; }

.cont-full {
  width: 100%; }
  .cont-full:after {
    display: block;
    content: '';
    clear: both; }

#mobile_nav {
  display: none; }

#mob_bg {
  display: none; }

.top-nav {
  z-index: 1000;
  padding-top: 20px;
  padding-bottom: 20px;
  position: relative; }
  .top-nav .logo {
    float: left;
    max-width: 190px;
    width: 100%;
    display: block;
    height: 27px;
    background-position: left center;
    -webkit-background-size: contain;
    background-repeat: no-repeat;
    background-size: contain;
    background-image: url("../img/logo-2.png"); }
  .top-nav nav {
    width: 80%;
    float: right;
    display: block; }
  .top-nav .nav {
    float: left; }
    .top-nav .nav li {
      position: relative;
      display: inline-block;
      margin-right: 40px; }
      .top-nav .nav li a {
        display: block;
        color: #fff;
        -webkit-transition: all 0.1s ease-in-out;
        transition: all 0.1s ease-in-out;
        line-height: 27px;
        vertical-align: middle;
        -webkit-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        -moz-osx-font-smoothing: grayscale;
        position: relative;
        overflow: hidden; }
        .top-nav .nav li a:before {
          content: "";
          position: absolute;
          z-index: -1;
          left: 50%;
          right: 50%;
          bottom: 0;
          background: #ffffff;
          height: 2px;
          -webkit-transition-property: left, right;
          transition-property: left, right;
          -webkit-transition-duration: 0.3s;
          transition-duration: 0.3s;
          -webkit-transition-timing-function: ease-out;
          transition-timing-function: ease-out; }
        .top-nav .nav li a:hover:before {
          left: 0;
          right: 0; }
  .top-nav .auth {
    width: auto;
    float: right; }
    .top-nav .auth li {
      display: inline-block;
      margin: 0 3px;
      /*&.h-business {
        a {
          border: 1px solid #00a6e6;
          color: #fff;
          background-color: #00a6e6;
        }
        &:hover {
          a {
            background: rgba(255, 255, 255, 0.5);
            color: #6cd6ff;
          }
        }
      }
      &.h-sign {
        a {
          border: 1px solid #fff;
          color: #fff;
          background-color: rgba(255, 255, 255, 0.5);
        }
      }*/ }
      .top-nav .auth li a {
        font-size: 12px;
        line-height: 27px;
        display: block;
        border: 1px solid #fff;
        color: #00a6e6;
        background: white;
        text-transform: uppercase;
        padding: 0 10px;
        -webkit-transition: all 200ms ease-in-out;
        transition: all 200ms ease-in-out;
        -webkit-border-radius: 15px;
        border-radius: 15px; }
        .top-nav .auth li a:hover {
          border: 1px solid #fff;
          background: rgba(255, 255, 255, 0.5);
          color: #fff; }

.select-drop-city {
  padding: 10px;
  display: none;
  width: 210px;
  position: absolute;
  top: 25px;
  left: 0;
  background-color: #fff;
  min-height: 300px; }

.main-top-bg {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;
  background-image: url("../img/photo-home-page.png"); }

.top-bg {
  background-color: #00a6e6; }

.box-1 {
  height: 45vh;
  text-align: center;
  padding: 10vh 0;
  color: #fff; }
  .box-1 h1 {
    font-size: 55px;
    line-height: 60px;
    margin-bottom: 40px;
    font-family: "Cera PRO", sans-serif;
    /*&:first-child {
      font-family: Arial;
    }*/ }
  .box-1 p {
    font-size: 22px;
    line-height: 25px; }

.search-header-mob {
  display: none; }

.footer {
  background-color: #003144;
  padding: 30px 0; }
  .footer footer {
    border-bottom: 1px solid #4c6e7c;
    padding-bottom: 30px; }
  .footer .logo {
    width: 175px; }
  .footer p {
    color: #868e92;
    line-height: 60px; }
  .footer .footer-social li {
    display: inline-block;
    margin-right: 5px; }
  .footer .footer-social a {
    -webkit-transition: all 200ms ease-in-out;
    transition: all 200ms ease-in-out; }
    .footer .footer-social a:before {
      font-size: 48px;
      color: #4c6e7c; }
    .footer .footer-social a:hover {
      opacity: 0.7; }
  .footer .footer-nav li {
    line-height: 50px; }
  .footer .footer-nav a {
    display: inline-block;
    line-height: 20px;
    color: #fff;
    vertical-align: middle;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    padding-bottom: 3px;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    position: relative;
    overflow: hidden; }
    .footer .footer-nav a:before {
      content: "";
      position: absolute;
      z-index: -1;
      left: 50%;
      right: 50%;
      bottom: 0;
      background: #ffffff;
      height: 2px;
      -webkit-transition-property: left, right;
      transition-property: left, right;
      -webkit-transition-duration: 0.3s;
      transition-duration: 0.3s;
      -webkit-transition-timing-function: ease-out;
      transition-timing-function: ease-out; }
    .footer .footer-nav a:hover:before {
      left: 0;
      right: 0; }

.pop_ups_all {
  display: none; }

#cboxContent {
  background-color: #ededed; }

.auth-container:after {
  display: block;
  content: '';
  clear: both; }

.auth-container h5 {
  font: 500 16px/20px "Roboto", sans-serif;
  color: #484748;
  text-align: center;
  margin-bottom: 15px; }

.auth-nav {
  font-size: 0; }
  .auth-nav li {
    background-color: transparent;
    cursor: pointer;
    text-align: center;
    width: 50%;
    font: 400 20px/60px "Cera PRO", sans-serif;
    color: #000;
    display: inline-block; }
    .auth-nav li.active {
      font-weight: 700;
      background-color: #fff; }

.auth-content {
  padding: 25px;
  background-color: #fff;
  margin-bottom: 30px; }
  .auth-content:after {
    display: block;
    content: '';
    clear: both; }

.auth-social {
  text-align: center;
  margin-bottom: 30px; }
  .auth-social li {
    display: inline-block; }
  .auth-social a {
    font-size: 48px;
    margin: 0 20px;
    -webkit-transition: all 200ms ease-in-out;
    transition: all 200ms ease-in-out; }
    .auth-social a:hover {
      opacity: .7; }
    .auth-social a.i-vk-with-circle {
      color: #44678d; }
    .auth-social a.i-facebook-with-circle {
      color: #3a559f; }
    .auth-social a.i-google-with-circle {
      color: #dd4b39; }

@media screen and (max-width: 980px) {
  .box-1 {
    height: 235px;
    padding: 3vh 0; }
    .box-1 h1 {
      font-size: 48px;
      line-height: 50px;
      margin-bottom: 20px; }
    .box-1 p {
      font-size: 18px;
      line-height: 22px; } }

@media screen and (max-width: 880px) {
  #mobile_nav {
    display: block;
    z-index: 999999;
    width: 25px;
    height: 24px;
    position: absolute;
    left: 10px;
    top: 12px;
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
        transform: rotate(0deg);
    -webkit-transition: .5s ease-in-out;
    transition: .5s ease-in-out;
    cursor: pointer; }
    #mobile_nav span {
      display: block;
      position: absolute;
      height: 4px;
      width: 100%;
      background: #ffffff;
      opacity: 1;
      left: 0;
      -webkit-transform: rotate(0deg);
      -ms-transform: rotate(0deg);
          transform: rotate(0deg);
      -webkit-transition: .25s ease-in-out;
      transition: .25s ease-in-out; }
      #mobile_nav span:nth-child(1) {
        top: 0px;
        -webkit-transform-origin: left center;
        -ms-transform-origin: left center;
            transform-origin: left center; }
      #mobile_nav span:nth-child(2) {
        top: 11px;
        -webkit-transform-origin: left center;
        -ms-transform-origin: left center;
            transform-origin: left center; }
      #mobile_nav span:nth-child(3) {
        top: 23px;
        -webkit-transform-origin: left center;
        -ms-transform-origin: left center;
            transform-origin: left center; }
    #mobile_nav.open {
      left: 280px; }
      #mobile_nav.open span:nth-child(1) {
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg);
        top: 0;
        left: 0;
        width: 34px; }
      #mobile_nav.open span:nth-child(2) {
        width: 0%;
        opacity: 0; }
      #mobile_nav.open span:nth-child(3) {
        -webkit-transform: rotate(-45deg);
        -ms-transform: rotate(-45deg);
            transform: rotate(-45deg);
        top: 24px;
        left: 0;
        width: 34px; }
  .top-nav {
    position: relative;
    padding-top: 10px; }
    .top-nav .logo {
      float: none;
      margin: 0 auto; }
    .top-nav nav {
      position: fixed;
      left: -270px;
      bottom: 0;
      top: 0;
      width: 270px;
      background-color: #3bc8ff;
      z-index: 999999;
      -webkit-transition: all 0.5s ease-in-out;
      transition: all 0.5s ease-in-out; }
      .top-nav nav .nav {
        float: none;
        padding-top: 50px; }
        .top-nav nav .nav li {
          display: block;
          width: 100%;
          padding-left: 30px;
          margin-bottom: 30px; }
          .top-nav nav .nav li a {
            display: inline-block; }
      .top-nav nav .auth {
        float: none; }
        .top-nav nav .auth li {
          display: inline-block;
          width: 100%;
          padding-left: 30px;
          margin-bottom: 30px; }
          .top-nav nav .auth li a {
            display: inline-block; }
      .top-nav nav.nav-opener {
        height: 100%;
        overflow-y: auto;
        left: 0; }
        .top-nav nav.nav-opener + #mob_bg {
          position: fixed;
          background-color: rgba(0, 0, 0, 0.6);
          display: block;
          left: 0;
          right: 0;
          bottom: 0;
          top: 0;
          z-index: 7000; } }

@media screen and (max-width: 768px) {
  .search-header-mob {
    display: block;
    position: absolute;
    left: 85px;
    top: 5px;
    right: 50px; }
    .search-header-mob input {
      -webkit-border-radius: 4px;
      border-radius: 4px;
      /*border-bottom:1px solid #fff;
      border-left:0;
      border-right:0;
      border-top:0;*/
      border: 0;
      width: 100%;
      height: 40px;
      line-height: 35px;
      padding-left: 10px;
      background-color: rgba(255, 255, 255, 0.4);
      /* &::-webkit-input-placeholder {color:#898b8d;}
      &::-moz-placeholder          {color:#898b8d;}!* Firefox 19+ *!
      &:-moz-placeholder           {color:#898b8d;}!* Firefox 18- *!
      &:-ms-input-placeholder      {color:#898b8d;}*/ }
      .search-header-mob input:focus {
        outline: 0; }
    .search-header-mob i {
      position: absolute;
      display: block;
      top: 8px; }
      .search-header-mob i.i-filter {
        right: -40px; }
        .search-header-mob i.i-filter:before {
          color: #fff;
          font-size: 20px; }
      .search-header-mob i.i-search {
        right: 8px; }
        .search-header-mob i.i-search:before {
          color: #fff;
          font-size: 20px; }
  .search-header .top-nav {
    padding-top: 5px;
    padding-bottom: 5px; }
  .search-header .logo {
    margin-left: 25px;
    max-width: 40px;
    width: 100%;
    float: left;
    height: 40px;
    background-position: center center;
    -webkit-background-size: contain;
    background-repeat: no-repeat;
    background-size: contain;
    background-image: url("../img/search-mob-logo.png"); }
  .box-1 h1 {
    font-size: 36px;
    line-height: 40px; }
  .footer {
    padding: 15px 0; }
    .footer .half-cont {
      width: 98%;
      float: none;
      margin: 0 auto; }
      .footer .half-cont .half-cont {
        width: 50%;
        float: left;
        margin: 0; }
    .footer footer {
      padding-bottom: 15px; }
    .footer .logo {
      width: 175px; }
    .footer p {
      color: #868e92;
      line-height: 40px; }
    .footer .footer-social li {
      display: inline-block;
      margin-right: 5px; }
    .footer .footer-social a {
      -webkit-transition: all 200ms ease-in-out;
      transition: all 200ms ease-in-out; }
      .footer .footer-social a:before {
        font-size: 48px;
        color: #4c6e7c; }
      .footer .footer-social a:hover {
        opacity: 0.7; }
    .footer .footer-nav li {
      line-height: 50px; }
    .footer .footer-nav a {
      display: inline-block;
      line-height: 20px;
      color: #fff;
      vertical-align: middle;
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
      padding-bottom: 3px;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -moz-osx-font-smoothing: grayscale;
      position: relative;
      overflow: hidden; }
      .footer .footer-nav a:before {
        content: "";
        position: absolute;
        z-index: -1;
        left: 50%;
        right: 50%;
        bottom: 0;
        background: #ffffff;
        height: 2px;
        -webkit-transition-property: left, right;
        transition-property: left, right;
        -webkit-transition-duration: 0.3s;
        transition-duration: 0.3s;
        -webkit-transition-timing-function: ease-out;
        transition-timing-function: ease-out; }
      .footer .footer-nav a:hover:before {
        left: 0;
        right: 0; } }

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */
